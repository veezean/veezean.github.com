{"title":"吧vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv","uid":"1b08d4f8c3a03d7692509fe1a83dbeac","slug":"2021/hello-world4","date":"2023-01-20T05:19:05.796Z","updated":"2023-01-20T05:19:49.131Z","comments":true,"path":"api/articles/2021/hello-world4.json","keywords":"JAVA 架构 中间件 Spring","cover":[],"content":"<p>在JAVA中，涉及到对 <code>数组</code>、<code>Collection</code>等集合类中的元素进行操作的时候，通常会通过<strong>循环的方式</strong>进行逐个处理，或者<strong>使用Stream</strong>的方式进行处理。</p>\n<p>例如，现在有这么一个需求：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个</p></blockquote>\n<p>在<strong>JAVA7及之前</strong>的代码中，我们会可以照如下的方式进行实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * 【常规方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n *&#x2F;\npublic List&lt;String&gt; sortGetTop3LongWords(@NotNull String sentence) &#123;\n    &#x2F;&#x2F; 先切割句子，获取具体的单词信息\n    String[] words &#x3D; sentence.split(&quot; &quot;);\n    List&lt;String&gt; wordList &#x3D; new ArrayList&lt;&gt;();\n    &#x2F;&#x2F; 循环判断单词的长度，先过滤出符合长度要求的单词\n    for (String word : words) &#123;\n        if (word.length() &gt; 5) &#123;\n            wordList.add(word);\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 对符合条件的列表按照长度进行排序\n    wordList.sort((o1, o2) -&gt; o2.length() - o1.length());\n    &#x2F;&#x2F; 判断list结果长度，如果大于3则截取前三个数据的子list返回\n    if (wordList.size() &gt; 3) &#123;\n        wordList &#x3D; wordList.subList(0, 3);\n    &#125;\n    return wordList;\n&#125;\n</code></pre>\n\n<p>在<strong>JAVA8及之后</strong>的版本中，借助Stream流，我们可以更加优雅的写出如下代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * 【Stream方式】\n * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个\n *\n * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔\n * @return 倒序输出符合条件的单词列表\n *&#x2F;\npublic List&lt;String&gt; sortGetTop3LongWordsByStream(@NotNull String sentence) &#123;\n    return Arrays.stream(sentence.split(&quot; &quot;))\n            .filter(word -&gt; word.length() &gt; 5)\n            .sorted((o1, o2) -&gt; o2.length() - o1.length())\n            .limit(3)\n            .collect(Collectors.toList());\n&#125;\n</code></pre>\n\n<p>直观感受上，<code>Stream</code>的实现方式代码更加简洁、一气呵成。很多的同学在代码中也经常使用Stream流，但是对Stream流的认知往往也是仅限于会一些简单的 <code>filter</code>、<code>map</code>、<code>collect</code>等操作，但JAVA的Stream可以适用的场景与能力远不止这些。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<p>那么问题来了：<strong>Stream相较于传统的foreach的方式处理，到底有啥优势</strong>？</p>\n<p>这里我们可以先搁置这个问题，先整体全面的了解下Stream，然后再来讨论下这个问题。</p>\n<p>笔者结合在团队中多年的代码检视遇到的情况，结合平时项目编码实践经验，对<strong>Stream的核心要点与易混淆用法</strong>、<strong>典型使用场景</strong>等进行了详细的梳理总结，希望可以帮助大家对Stream有个更全面的认知，也可以更加高效的应用到项目开发中去。</p>\n<h2 id=\"Stream初相识\"><a href=\"#Stream初相识\" class=\"headerlink\" title=\"Stream初相识\"></a>Stream初相识</h2><p>概括讲，可以将Stream流操作分为<strong>3种类型</strong>：</p>\n<ul>\n<li>创建Stream</li>\n<li>Stream中间处理</li>\n<li>终止Steam</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207101448482.png\"></p>\n<p>每个Stream管道操作类型都包含若干API方法，先列举下各个API方法的功能介绍。</p>\n<ul>\n<li><strong>开始管道</strong></li>\n</ul>\n<p>主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stream()</td>\n<td>创建出一个新的stream串行流对象</td>\n</tr>\n<tr>\n<td>parallelStream()</td>\n<td>创建出一个可并行执行的stream流对象</td>\n</tr>\n<tr>\n<td>Stream.of()</td>\n<td>通过给定的一系列元素创建一个新的Stream串行流对象</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<ul>\n<li><strong>中间管道</strong></li>\n</ul>\n<p>负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行<strong>叠加</strong>。</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>filter()</td>\n<td>按照条件过滤符合要求的元素， 返回新的stream流</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流</td>\n</tr>\n<tr>\n<td>flatMap()</td>\n<td>将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流</td>\n</tr>\n<tr>\n<td>limit()</td>\n<td>仅保留集合前面指定个数的元素，返回新的stream流</td>\n</tr>\n<tr>\n<td>skip()</td>\n<td>跳过集合前面指定个数的元素，返回新的stream流</td>\n</tr>\n<tr>\n<td>concat()</td>\n<td>将两个流的数据合并起来为1个新的流，返回新的stream流</td>\n</tr>\n<tr>\n<td>distinct()</td>\n<td>对Stream中所有元素进行去重，返回新的stream流</td>\n</tr>\n<tr>\n<td>sorted()</td>\n<td>对stream中所有的元素按照指定规则进行排序，返回新的stream流</td>\n</tr>\n<tr>\n<td>peek()</td>\n<td>对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<ul>\n<li><strong>终止管道</strong></li>\n</ul>\n<p>顾名思义，通过终止管道操作之后，Stream流将<strong>会结束</strong>，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count()</td>\n<td>返回stream处理后最终的元素个数</td>\n</tr>\n<tr>\n<td>max()</td>\n<td>返回stream处理后的元素最大值</td>\n</tr>\n<tr>\n<td>min()</td>\n<td>返回stream处理后的元素最小值</td>\n</tr>\n<tr>\n<td>findFirst()</td>\n<td>找到第一个符合条件的元素时则终止流处理</td>\n</tr>\n<tr>\n<td>findAny()</td>\n<td>找到任何一个符合条件的元素时则退出流处理，这个<strong>对于串行流时与findFirst相同，对于并行流时比较高效</strong>，任何分片中找到都会终止后续计算逻辑</td>\n</tr>\n<tr>\n<td>anyMatch()</td>\n<td>返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素</td>\n</tr>\n<tr>\n<td>allMatch()</td>\n<td>返回一个boolean值，用于判断是否所有元素都符合条件</td>\n</tr>\n<tr>\n<td>noneMatch()</td>\n<td>返回一个boolean值， 用于判断是否所有元素都不符合条件</td>\n</tr>\n<tr>\n<td>collect()</td>\n<td>将流转换为指定的类型，通过Collectors进行指定</td>\n</tr>\n<tr>\n<td>toArray()</td>\n<td>将流转换为数组</td>\n</tr>\n<tr>\n<td>iterator()</td>\n<td>将流转换为Iterator对象</td>\n</tr>\n<tr>\n<td>foreach()</td>\n<td>无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑</td>\n</tr>\n</tbody></table>\n<h2 id=\"Stream方法使用\"><a href=\"#Stream方法使用\" class=\"headerlink\" title=\"Stream方法使用\"></a>Stream方法使用</h2><h3 id=\"map与flatMap\"><a href=\"#map与flatMap\" class=\"headerlink\" title=\"map与flatMap\"></a>map与flatMap</h3><p><code>map</code>与 <code>flatMap</code>都是用于转换已有的元素为其它元素，区别点在于：</p>\n<ul>\n<li>map <strong>必须是一对一的</strong>，即每个元素都只能转换为1个新的元素</li>\n<li>flatMap <strong>可以是一对多的</strong>，即每个元素都可以转换为1个或者多个新的元素</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207101616088.png\"></p>\n<p>比如：<strong>有一个字符串ID列表，现在需要将其转为User对象列表</strong>。可以使用map来实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;**\n * 演示map的用途：一对一转换\n *&#x2F;\npublic void stringToIntMap() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;105&quot;, &quot;308&quot;, &quot;469&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;);\n    &#x2F;&#x2F; 使用流操作\n    List&lt;User&gt; results &#x3D; ids.stream()\n            .map(id -&gt; &#123;\n                User user &#x3D; new User();\n                user.setId(id);\n                return user;\n            &#125;)\n            .collect(Collectors.toList());\n    System.out.println(results);\n&#125;\n</code></pre>\n\n<p>执行之后，会发现每一个元素都被转换为对应新的元素，但是前后总元素个数是一致的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n[User&#123;id&#x3D;&#39;205&#39;&#125;, \n User&#123;id&#x3D;&#39;105&#39;&#125;,\n User&#123;id&#x3D;&#39;308&#39;&#125;, \n User&#123;id&#x3D;&#39;469&#39;&#125;, \n User&#123;id&#x3D;&#39;627&#39;&#125;, \n User&#123;id&#x3D;&#39;193&#39;&#125;, \n User&#123;id&#x3D;&#39;111&#39;&#125;]\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<p>再比如：<strong>现有一个句子列表，需要将句子中每个单词都提取出来得到一个所有单词列表</strong>。这种情况用map就搞不定了，需要 <code>flatMap</code>上场了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void stringToIntFlatmap() &#123;\n    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);\n    &#x2F;&#x2F; 使用流操作\n    List&lt;String&gt; results &#x3D; sentences.stream()\n            .flatMap(sentence -&gt; Arrays.stream(sentence.split(&quot; &quot;)))\n            .collect(Collectors.toList());\n    System.out.println(results);\n&#125;\n</code></pre>\n\n<p>执行结果如下，可以看到结果列表中元素个数是比原始列表元素个数要多的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n[hello, world, Jia, Gou, Wu, Dao]\n</code></pre>\n\n<p>这里需要补充一句，<code>flatMap</code>操作的时候其实是先每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream，如下：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207101630745.png\"></p>\n<h3 id=\"peek和foreach方法\"><a href=\"#peek和foreach方法\" class=\"headerlink\" title=\"peek和foreach方法\"></a>peek和foreach方法</h3><p><code>peek</code>和 <code>foreach</code>，都可以用于对元素进行遍历然后逐个的进行处理。</p>\n<p>但根据前面的介绍，<strong>peek属于中间方法</strong>，而<strong>foreach属于终止方法</strong>。这也就意味着peek只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；而foreach作为无返回值的终止方法，则可以直接执行相关操作。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testPeekAndforeach() &#123;\n    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);\n    &#x2F;&#x2F; 演示点1： 仅peek操作，最终不会执行\n    System.out.println(&quot;----before peek----&quot;);\n    sentences.stream().peek(sentence -&gt; System.out.println(sentence));\n    System.out.println(&quot;----after peek----&quot;);\n    &#x2F;&#x2F; 演示点2： 仅foreach操作，最终会执行\n    System.out.println(&quot;----before foreach----&quot;);\n    sentences.stream().forEach(sentence -&gt; System.out.println(sentence));\n    System.out.println(&quot;----after foreach----&quot;);\n    &#x2F;&#x2F; 演示点3： peek操作后面增加终止操作，peek会执行\n    System.out.println(&quot;----before peek and count----&quot;);\n    sentences.stream().peek(sentence -&gt; System.out.println(sentence)).count();\n    System.out.println(&quot;----after peek and count----&quot;);\n&#125;\n</code></pre>\n\n<p>输出结果可以看出，peek独自调用时并没有被执行、但peek后面加上终止操作之后便可以被执行，而foreach可以直接被执行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n----before peek----\n----after peek----\n----before foreach----\nhello world\nJia Gou Wu Dao\n----after foreach----\n----before peek and count----\nhello world\nJia Gou Wu Dao\n----after peek and count----\n\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"filter、sorted、distinct、limit\"><a href=\"#filter、sorted、distinct、limit\" class=\"headerlink\" title=\"filter、sorted、distinct、limit\"></a>filter、sorted、distinct、limit</h3><p>这几个都是常用的Stream的中间操作方法，具体的方法的含义在上面的表格里面有说明。具体使用的时候，<strong>可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testGetTargetUsers() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;,&quot;10&quot;,&quot;308&quot;,&quot;49&quot;,&quot;627&quot;,&quot;193&quot;,&quot;111&quot;, &quot;193&quot;);\n    &#x2F;&#x2F; 使用流操作\n    List&lt;Dept&gt; results &#x3D; ids.stream()\n            .filter(s -&gt; s.length() &gt; 2)\n            .distinct()\n            .map(Integer::valueOf)\n            .sorted(Comparator.comparingInt(o -&gt; o))\n            .limit(3)\n            .map(id -&gt; new Dept(id))\n            .collect(Collectors.toList());\n    System.out.println(results);\n&#125;\n</code></pre>\n\n<p>上面的代码片段的处理逻辑很清晰：</p>\n<ol>\n<li>使用filter过滤掉不符合条件的数据</li>\n<li>通过distinct对存量元素进行去重操作</li>\n<li>通过map操作将字符串转成整数类型</li>\n<li>借助sorted指定按照数字大小正序排列</li>\n<li>使用limit截取排在前3位的元素</li>\n<li>又一次使用map将id转为Dept对象类型</li>\n<li>使用collect终止操作将最终处理后的数据收集到list中</li>\n</ol>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[Dept&#123;id&#x3D;111&#125;,  Dept&#123;id&#x3D;193&#125;,  Dept&#123;id&#x3D;205&#125;]\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"简单结果终止方法\"><a href=\"#简单结果终止方法\" class=\"headerlink\" title=\"简单结果终止方法\"></a>简单结果终止方法</h3><p>按照前面介绍的，终止方法里面像 <code>count</code>、<code>max</code>、<code>min</code>、<code>findAny</code>、<code>findFirst</code>、<code>anyMatch</code>、<code>allMatch</code>、<code>noneMatch</code>等方法，均属于这里说的简单结果终止方法。所谓简单，指的是其结果形式是数字、布尔值或者Optional对象值等。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testSimpleStopOptions() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);\n    &#x2F;&#x2F; 统计stream操作后剩余的元素个数\n    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).count());\n    &#x2F;&#x2F; 判断是否有元素值等于205\n    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).anyMatch(&quot;205&quot;::equals));\n    &#x2F;&#x2F; findFirst操作\n    ids.stream().filter(s -&gt; s.length() &gt; 2)\n            .findFirst()\n            .ifPresent(s -&gt; System.out.println(&quot;findFirst:&quot; + s));\n&#125;\n</code></pre>\n\n<p>执行后结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n6\ntrue\nfindFirst:205\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<p><strong>避坑提醒</strong></p>\n<p>这里需要补充提醒下，<strong>一旦一个Stream被执行了终止操作之后，后续便不可以再读这个流执行其他的操作</strong>了，否则会报错，看下面示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testHandleStreamAfterClosed() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);\n    Stream&lt;String&gt; stream &#x3D; ids.stream().filter(s -&gt; s.length() &gt; 2);\n    &#x2F;&#x2F; 统计stream操作后剩余的元素个数\n    System.out.println(stream.count());\n    System.out.println(&quot;-----下面会报错-----&quot;);\n    &#x2F;&#x2F; 判断是否有元素值等于205\n    try &#123;\n        System.out.println(stream.anyMatch(&quot;205&quot;::equals));\n    &#125; catch (Exception e) &#123;\n        e.printStackTrace();\n    &#125;\n    System.out.println(&quot;-----上面会报错-----&quot;);\n&#125;\n</code></pre>\n\n<p>执行的时候，结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n6\n-----下面会报错-----\njava.lang.IllegalStateException: stream has already been operated upon or closed\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:229)\n\tat java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)\n\tat com.veezean.skills.stream.StreamService.testHandleStreamAfterClosed(StreamService.java:153)\n\tat com.veezean.skills.stream.StreamService.main(StreamService.java:176)\n-----上面会报错-----\n</code></pre>\n\n<p>因为stream已经被执行 <code>count()</code>终止方法了，所以对stream再执行 <code>anyMatch</code>方法的时候，就会报错 <code>stream has already been operated upon or closed</code>，这一点在使用的时候需要特别注意。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"结果收集终止方法\"><a href=\"#结果收集终止方法\" class=\"headerlink\" title=\"结果收集终止方法\"></a>结果收集终止方法</h3><p>因为Stream主要用于对集合数据的处理场景，所以除了上面几种获取简单结果的终止方法之外，更多的场景是获取一个集合类的结果对象，比如List、Set或者HashMap等。</p>\n<p>这里就需要 <code>collect</code>方法出场了，它可以支持生成如下类型的结果数据：</p>\n<ul>\n<li>一个 <code>集合类</code>，比如List、Set或者HashMap等</li>\n<li>StringBuilder对象，支持将多个 <code>字符串进行拼接</code>处理并输出拼接后结果</li>\n<li>一个可以记录个数或者计算总和的对象（<code>数据批量运算统计</code>）</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h4 id=\"生成集合\"><a href=\"#生成集合\" class=\"headerlink\" title=\"生成集合\"></a>生成集合</h4><p>应该算是collect最常被使用到的一个场景了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testCollectStopOptions() &#123;\n    List&lt;Dept&gt; ids &#x3D; Arrays.asList(new Dept(17), new Dept(22), new Dept(23));\n    &#x2F;&#x2F; collect成list\n    List&lt;Dept&gt; collectList &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)\n            .collect(Collectors.toList());\n    System.out.println(&quot;collectList:&quot; + collectList);\n    &#x2F;&#x2F; collect成Set\n    Set&lt;Dept&gt; collectSet &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)\n            .collect(Collectors.toSet());\n    System.out.println(&quot;collectSet:&quot; + collectSet);\n    &#x2F;&#x2F; collect成HashMap，key为id，value为Dept对象\n    Map&lt;Integer, Dept&gt; collectMap &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)\n            .collect(Collectors.toMap(Dept::getId, dept -&gt; dept));\n    System.out.println(&quot;collectMap:&quot; + collectMap);\n&#125;\n</code></pre>\n\n<p>结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\ncollectList:[Dept&#123;id&#x3D;22&#125;, Dept&#123;id&#x3D;23&#125;]\ncollectSet:[Dept&#123;id&#x3D;23&#125;, Dept&#123;id&#x3D;22&#125;]\ncollectMap:&#123;22&#x3D;Dept&#123;id&#x3D;22&#125;, 23&#x3D;Dept&#123;id&#x3D;23&#125;&#125;\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h4 id=\"生成拼接字符串\"><a href=\"#生成拼接字符串\" class=\"headerlink\" title=\"生成拼接字符串\"></a>生成拼接字符串</h4><p><strong>将一个List或者数组中的值拼接到一个字符串里并以逗号分隔开</strong>，这个场景相信大家都不陌生吧？</p>\n<p>如果通过 <code>for</code>循环和 <code>StringBuilder</code>去循环拼接，还得考虑下最后一个逗号如何处理的问题，很繁琐:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testForJoinStrings() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);\n    StringBuilder builder &#x3D; new StringBuilder();\n    for (String id : ids) &#123;\n        builder.append(id).append(&#39;,&#39;);\n    &#125;\n    &#x2F;&#x2F; 去掉末尾多拼接的逗号\n    builder.deleteCharAt(builder.length() - 1);\n    System.out.println(&quot;拼接后：&quot; + builder.toString());\n&#125;\n</code></pre>\n\n<p>但是现在有了Stream，使用 <code>collect</code>可以轻而易举的实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testCollectJoinStrings() &#123;\n    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);\n    String joinResult &#x3D; ids.stream().collect(Collectors.joining(&quot;,&quot;));\n    System.out.println(&quot;拼接后：&quot; + joinResult);\n&#125;\n</code></pre>\n\n<p>两种方式都可以得到完全相同的结果，但Stream的方式更优雅：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">拼接后：205,10,308,49,627,193,111,193\n</code></pre>\n\n<p>📢 <strong>敲黑板：</strong></p>\n<p>关于这里的说明，评论区中很多的小伙伴提出过疑问，就是这个场景其实使用 <code>String.join()</code> 就可以搞定了，并不需要上面使用 <code>stream</code> 的方式去实现。这里要声明下，<strong>Stream的魅力之处就在于其可以结合到其它的业务逻辑中进行处理</strong>，让代码逻辑更加的自然、一气呵成。如果纯粹是个String字符串拼接的诉求，确实没有必要使用Stream来实现，毕竟杀鸡焉用牛刀嘛~ 但是可以看看下面给出的这个示例，便可以感受出使用Stream进行字符串拼接的真正魅力所在。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202209241126617.png\"></p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h4 id=\"数据批量数学运算\"><a href=\"#数据批量数学运算\" class=\"headerlink\" title=\"数据批量数学运算\"></a>数据批量数学运算</h4><p>还有一种场景，实际使用的时候可能会比较少，就是使用collect生成数字数据的总和信息，也可以了解下实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\npublic void testNumberCalculate() &#123;\n    List&lt;Integer&gt; ids &#x3D; Arrays.asList(10, 20, 30, 40, 50);\n    &#x2F;&#x2F; 计算平均值\n    Double average &#x3D; ids.stream().collect(Collectors.averagingInt(value -&gt; value));\n    System.out.println(&quot;平均值：&quot; + average);\n    &#x2F;&#x2F; 数据统计信息\n    IntSummaryStatistics summary &#x3D; ids.stream().collect(Collectors.summarizingInt(value -&gt; value));\n    System.out.println(&quot;数据统计信息： &quot; + summary);\n&#125;\n</code></pre>\n\n<p>上面的例子中，使用collect方法来对list中元素值进行数学运算，结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n平均值：30.0\n总和： IntSummaryStatistics&#123;count&#x3D;5, sum&#x3D;150, min&#x3D;10, average&#x3D;30.000000, max&#x3D;50&#125;\n</code></pre>\n\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"并行Stream\"><a href=\"#并行Stream\" class=\"headerlink\" title=\"并行Stream\"></a>并行Stream</h2><h3 id=\"机制说明\"><a href=\"#机制说明\" class=\"headerlink\" title=\"机制说明\"></a>机制说明</h3><p>使用并行流，可以有效利用计算机的多CPU硬件，提升逻辑的执行速度。并行流通过将一整个stream划分为 <code>多个片段</code>，然后对各个分片流并行执行处理逻辑，最后将各个分片流的执行结果汇总为一个整体流。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102118100.png\"></p>\n<h3 id=\"约束与限制\"><a href=\"#约束与限制\" class=\"headerlink\" title=\"约束与限制\"></a>约束与限制</h3><p>并行流类似于多线程在并行处理，所以与多线程场景相关的一些问题同样会存在，比如死锁等问题，所以在并行流终止执行的函数逻辑，必须要保证<strong>线程安全</strong>。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"回答最初的问题\"><a href=\"#回答最初的问题\" class=\"headerlink\" title=\"回答最初的问题\"></a>回答最初的问题</h2><p>到这里，关于JAVA Stream的相关概念与用法介绍，基本就讲完了。我们再把焦点切回本文刚开始时提及的一个问题：</p>\n<p><strong>Stream相较于传统的foreach的方式处理stream，到底有啥优势</strong>？</p>\n<p>根据前面的介绍，我们应该可以得出如下几点答案：</p>\n<ul>\n<li><strong>代码更简洁</strong>、偏声明式的编码风格，更容易体现出代码的逻辑意图</li>\n<li><strong>逻辑间解耦</strong>，一个stream中间处理逻辑，无需关注上游与下游的内容，只需要按约定实现自身逻辑即可</li>\n<li>并行流场景<strong>效率</strong>会比迭代器逐个循环更高</li>\n<li>函数式接口，<strong>延迟执行</strong>的特性，中间管道操作不管有多少步骤都不会立即执行，只有遇到终止操作的时候才会开始执行，可以避免一些中间不必要的操作消耗</li>\n</ul>\n<p>当然了，Stream也不全是优点，在有些方面也有其弊端：</p>\n<ul>\n<li>代码调测debug不便</li>\n<li>程序员从历史写法切换到Stream时，需要一定的适应时间</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>好啦，关于JAVA Stream的理解要点与使用技能的阐述就先到这里啦。那通过上面的介绍，各位小伙伴们是否已经跃跃欲试了呢？快去项目中使用体验下吧！当然啦，如果有疑问，也欢迎找我一起探讨探讨咯。</p>\n<p><strong>此外</strong>：</p>\n<ul>\n<li>关于<strong>Stream中collect的分组、分片等进阶操作，以及对并行流的深入探讨</strong>，因为涉及内容比较多且相对独立，<strong>我会在后续的文档中展开专门介绍下</strong>，如果有兴趣的话，可以点个关注、避免迷路。</li>\n<li>关于本文中涉及的<strong>演示代码</strong>的完整示例，我已经整理并提交到github中，如果您有需要，可以自取：<a href=\"https://github.com/veezean/JavaBasicSkills\">https://github.com/veezean/JavaBasicSkills</a></li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p>\n<p>如果觉得有用，请点个关注，也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p>\n<p>期待与你一起探讨，一起成长为更好的自己。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207091312091.gif\"></p>\n","feature":true,"text":"在JAVA中，涉及到对 数组、Collection等集合类中的元素进行操作的时候，通常会通过循环的方式进行逐个处理，或者使用Stream的方式进行处理。 例如，现在有这么一个需求： 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 在JAVA7及之前的代码中...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"缓存实践专栏6","slug":"缓存实践专栏6","count":1,"path":"api/categories/缓存实践专栏6.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Stream%E5%88%9D%E7%9B%B8%E8%AF%86\"><span class=\"toc-text\">Stream初相识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Stream%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Stream方法使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#map%E4%B8%8EflatMap\"><span class=\"toc-text\">map与flatMap</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#peek%E5%92%8Cforeach%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">peek和foreach方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#filter%E3%80%81sorted%E3%80%81distinct%E3%80%81limit\"><span class=\"toc-text\">filter、sorted、distinct、limit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%BB%93%E6%9E%9C%E7%BB%88%E6%AD%A2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">简单结果终止方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%94%B6%E9%9B%86%E7%BB%88%E6%AD%A2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">结果收集终止方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E9%9B%86%E5%90%88\"><span class=\"toc-text\">生成集合</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">生成拼接字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%89%B9%E9%87%8F%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">数据批量数学运算</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8CStream\"><span class=\"toc-text\">并行Stream</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">机制说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F%E4%B8%8E%E9%99%90%E5%88%B6\"><span class=\"toc-text\">约束与限制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E7%AD%94%E6%9C%80%E5%88%9D%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">回答最初的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Veezean","slug":"blog-author","avatar":"https://pics.codingcoder.cn/pics/202301192158457.png","link":"/","description":"多年软件开发与系统架构经验，一起聊聊软件开发技术、系统架构技术、以及程序员最真实可行的职场打怪技能，代码之外的生存软技能。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"juejin":{"icon":"/svg/logo/juejin.svg","link":"https://juejin.cn/user/1028798616709294/posts"},"gongzhonghao":{"icon":"/svg/logo/gongzhonghao.svg","link":null},"github":{"icon":"/svg/logo/github.svg","link":"https://github.com/veezean?tab=repositories"},"cnblogs":{"icon":"/svg/logo/cnblogs.svg","link":"https://www.cnblogs.com/softwarearch"},"tencentcloud":{"icon":"/svg/logo/tencentcloud.svg","link":"https://cloud.tencent.com/developer/user/7082425/articles"},"toutiaohao":{"icon":"/svg/logo/toutiaohao.svg","link":"https://www.toutiao.com/c/user/token/MS4wLjABAAAA1iRfiAWyVlhlGsUE_zq38F9FS3FRx5FuKzOZO3cFsiI/?source=mine_profile&log_from=3ee8b793e0a65_1674178316319&tab=article"}}}},"mapped":true,"prev_post":{"title":"testgagagaga","uid":"2e3da9cee4e351233c8d55f8ea0c8423","slug":"testgagagaga","date":"2023-01-20T06:25:15.000Z","updated":"2023-01-20T06:25:39.596Z","comments":true,"path":"api/articles/testgagagaga.json","keywords":"JAVA 架构 中间件 Spring","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Veezean","slug":"blog-author","avatar":"https://pics.codingcoder.cn/pics/202301192158457.png","link":"/","description":"多年软件开发与系统架构经验，一起聊聊软件开发技术、系统架构技术、以及程序员最真实可行的职场打怪技能，代码之外的生存软技能。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"juejin":{"icon":"/svg/logo/juejin.svg","link":"https://juejin.cn/user/1028798616709294/posts"},"gongzhonghao":{"icon":"/svg/logo/gongzhonghao.svg","link":null},"github":{"icon":"/svg/logo/github.svg","link":"https://github.com/veezean?tab=repositories"},"cnblogs":{"icon":"/svg/logo/cnblogs.svg","link":"https://www.cnblogs.com/softwarearch"},"tencentcloud":{"icon":"/svg/logo/tencentcloud.svg","link":"https://cloud.tencent.com/developer/user/7082425/articles"},"toutiaohao":{"icon":"/svg/logo/toutiaohao.svg","link":"https://www.toutiao.com/c/user/token/MS4wLjABAAAA1iRfiAWyVlhlGsUE_zq38F9FS3FRx5FuKzOZO3cFsiI/?source=mine_profile&log_from=3ee8b793e0a65_1674178316319&tab=article"}}}},"feature":true},"next_post":{"title":"全面吃透JAVA Stream流操作，让代码更加的优雅","uid":"59d1635fe0da833e1ed3dc6653448adf","slug":"2023/全面吃透JAVA Stream流操作，让代码更加的优雅","date":"2023-01-20T02:59:53.507Z","updated":"2023-01-20T06:30:44.424Z","comments":true,"path":"api/articles/2023/全面吃透JAVA Stream流操作，让代码更加的优雅.json","keywords":"JAVA 架构 中间件 Spring","cover":[],"text":"在JAVA中，涉及到对 数组、Collection等集合类中的元素进行操作的时候，通常会通过循环的方式进行逐个处理，或者使用Stream的方式进行处理。 例如，现在有这么一个需求： 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 在JAVA7及之前的代码中...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[],"author":{"name":"Veezean","slug":"blog-author","avatar":"https://pics.codingcoder.cn/pics/202301192158457.png","link":"/","description":"多年软件开发与系统架构经验，一起聊聊软件开发技术、系统架构技术、以及程序员最真实可行的职场打怪技能，代码之外的生存软技能。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"juejin":{"icon":"/svg/logo/juejin.svg","link":"https://juejin.cn/user/1028798616709294/posts"},"gongzhonghao":{"icon":"/svg/logo/gongzhonghao.svg","link":null},"github":{"icon":"/svg/logo/github.svg","link":"https://github.com/veezean?tab=repositories"},"cnblogs":{"icon":"/svg/logo/cnblogs.svg","link":"https://www.cnblogs.com/softwarearch"},"tencentcloud":{"icon":"/svg/logo/tencentcloud.svg","link":"https://cloud.tencent.com/developer/user/7082425/articles"},"toutiaohao":{"icon":"/svg/logo/toutiaohao.svg","link":"https://www.toutiao.com/c/user/token/MS4wLjABAAAA1iRfiAWyVlhlGsUE_zq38F9FS3FRx5FuKzOZO3cFsiI/?source=mine_profile&log_from=3ee8b793e0a65_1674178316319&tab=article"}}}}}}