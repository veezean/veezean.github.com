{"title":"sdfsdfsdfsdfsdfsd","uid":"53f85b32e6814fbf1fd251f6dad13a7e","slug":"2021/hello-worldrrff3","date":"2022-11-16T16:00:00.000Z","updated":"2023-01-20T05:19:40.193Z","comments":true,"path":"api/articles/2021/hello-worldrrff3.json","keywords":"JAVA 架构 中间件 Spring","cover":[],"content":"<p><img src=\"https://pics.codingcoder.cn/pics/202210050807355.png\"></p>\n<p>大家好，又见面了。</p>\n<hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文是笔者作为掘金技术社区签约作者的身份输出的缓存专栏系列内容，将会通过系列专题，讲清楚缓存的方方面面。如果感兴趣，欢迎关注以获取后续更新。</p></blockquote>\n<hr>\n<p>在服务端开发中，<strong>缓存</strong>常常被当做系统<em>性能扛压</em>的不二之选。在实施方案上，缓存使用策略虽有一定普适性，却也并非完全绝对，需要结合实际的项目诉求与场景进行综合权衡与考量，进而得出符合自己项目的最佳实践。</p>\n<h2 id=\"缓存使用的演进\"><a href=\"#缓存使用的演进\" class=\"headerlink\" title=\"缓存使用的演进\"></a>缓存使用的演进</h2><p>现有这么一个系统：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一个互动论坛系统，用户登录系统之后，可以在论坛上查看帖子列表、查看帖子详情、发表帖子、评论帖子、为帖子点赞等操作。</p></blockquote>\n<p>系统中所有的配置数据与业务数据均存储在<code>数据库</code>中。随着业务的发展，注册用户量越来越多，然后整个系统的响应速度也越来越慢，用户体验越来越差，用户逐渐出现流失。</p>\n<h3 id=\"本地缓存的牛刀小试\"><a href=\"#本地缓存的牛刀小试\" class=\"headerlink\" title=\"本地缓存的牛刀小试\"></a>本地缓存的牛刀小试</h3><p>为了挽救这一局面，开发人员需要介入去分析性能瓶颈并尝试优化提升响应速度，并很快找到响应慢的瓶颈在数据库的频繁操作，于是想到了使用<code>缓存</code>来解决问题。</p>\n<p>于是，开发人员在项目中使用了<strong>基于接口</strong>维度的<strong>短期缓存</strong>，对每个接口的<code>请求参数</code>（帖子ID）与<code>响应内容</code>缓存一定的时间（比如1分钟），对于相同的请求，如果匹配到缓存则直接返回缓存的结果即可，不用再次去执行查询数据库以及业务维度的运算逻辑。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210010704311.png\"></p>\n<p><code>JAVA</code>中有很多的开源框架都有提供类似的能力支持，比如<code>Ehcache</code>或者<code>Guava Cache</code>、<code>Caffeine Cache</code>等，可以通过简单的添加注解的方式就实现上述需要的缓存效果。比如使用<em>Ehcache</em>来实现接口接口缓存的时候，代码使用方式如下（这里先简单的演示下，后续的系列文档中会专门对这些框架进行深入的探讨）：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Cacheable(value&#x3D;&quot;UserDetailCache&quot;, key&#x3D;&quot;#userId&quot;)\npublic UserDetail queryUserDetailById(String userId) &#123;\n    UserEntity userEntity &#x3D; userMapper.queryByUserId(userId);\n    return convertEntityToUserDetail(userEntity);\n&#125;</code></pre>\n\n<p>基上面的本地缓存策略改动后重新上线，整体的响应性能上果然提升了很多。<strong>本地缓存</strong>的策略虽然有效地提升了处理请求的速度，<em>但新的问题也随之浮现</em>。有用户反馈，社区内的帖子列表多次刷新后会出现内容不一致的情况，有的帖子刷新之后会从列表消失，多次刷新后偶尔会出现。</p>\n<p>其实这就是本地缓存在集群多节点场景下会遇到的一个很常见的<strong>缓存漂移</strong>现象：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210010815833.png\"></p>\n<p>因为业务集群存在多个节点，而缓存是每个业务节点本地独立构建的，所以才出现了更新场景导致的本地缓存不一致的问题，进而表现为上述问题现象。</p>\n<h3 id=\"集中式缓存的初露锋芒\"><a href=\"#集中式缓存的初露锋芒\" class=\"headerlink\" title=\"集中式缓存的初露锋芒\"></a>集中式缓存的初露锋芒</h3><p>为了解决集群内多个节点间执行写操作之后，各节点本地缓存不一致的问题，开发人员想到可以构建一个<strong>集中式缓存</strong>，然后所有业务节点都读取或者更新同一份缓存数据，这样就可以完美地解决节点间缓存不一致的问题了。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210010812002.png\"></p>\n<p>业界成熟的集中式缓存有很多，最出名的莫过于很多人都耳熟能详的<code>Redis</code>，或者是在各种面试中常常被拿来与Redis进行比较的<code>Memcached</code>。也正是由于它们出色的自身性能表现，在当前的各种分布式系统中，Redis近乎已经成为了一种标配，常常与<code>MySQL</code>等持久化数据库搭配使用，放在数据库前面进行扛压。比如下面图中示例的一种最简化版本的组网架构：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210041757340.png\"></p>\n<p>开发人员对缓存进行了整改，将<strong>本地缓存</strong>改为了<strong>Redis集中式缓存</strong>。这样一来：</p>\n<ol>\n<li><p><strong>缓存不一致问题解决</strong>：解决了各个节点间数据不一致的问题。</p>\n</li>\n<li><p><strong>单机内存容量限制解决</strong>：使用了Redis这种分布式的集中式缓存，扩大了内存缓存的容量范围，可以顺便将很多业务层面的数据全部加载到Redis中分片进行缓存，性能也相比而言得到了提升。</p>\n</li>\n</ol>\n<p>似乎使用集中式缓存已经是分布式系统中的最优解了，但是现实情况真的就这么简单么？<em>也不尽然</em>！</p>\n<h3 id=\"多级缓存的珠联璧合\"><a href=\"#多级缓存的珠联璧合\" class=\"headerlink\" title=\"多级缓存的珠联璧合\"></a>多级缓存的珠联璧合</h3><p>在尝到了集中式缓存的甜头之后，暖心的程序员们想到要彻底为数据库减压，将所有业务中需要频繁使用的数据全部同步存储到<code>Redis</code>中，然后业务使用的时候直接从Redis中获取相关数据，大大地减少了数据库的请求频次。但是改完上线之后，发现有些处理流程中<strong>并没有</strong>太大的性能提升。缘何如此？只因为对<code>集中式缓存</code>的过分<strong>滥用</strong>！分析发现这些流程的处理需要涉及大量的交互与数据整合逻辑，一个流程需要访问近乎<code>30</code>次Redis！虽然Redis的单次请求处理性能极高，甚至可以达到微秒级别的响应速度，但是每个流程里面几十次的<code>网络IO</code>交互，导致频繁的<code>IO请求</code>，以及线程的<code>阻塞</code>与<code>唤醒</code>切换交替，使得系统在线程上下文切换层面<strong>浪费巨大</strong>。</p>\n<p>那么，要想破局，最常规的手段便是尝试降低对集中式缓存（如Redis）的请求数量，降低网络IO交互次数。而如何来降低呢？ —— 又回到了<strong>本地缓存</strong>！集中式缓存并非是分布式系统中提升性能的银弹，但我们可以将本地缓存与集中式缓存结合起来使用，<strong>取长补短</strong>，实现效果最大化。如图所示：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210031821363.png\"></p>\n<p>上图演示的也即<strong>多级缓存</strong>的策略。具体而言：</p>\n<ul>\n<li><p>对于一些<strong>变更频率比较高</strong>的数据，采用<code>集中式缓存</code>，这样可以确保数据变更之后所有节点都可以实时感知到，确保数据一致；</p>\n</li>\n<li><p>对于一些<strong>极少变更的数据</strong>（比如一些系统配置项）或者是一些<strong>对短期一致性要求不高</strong>的数据（比如用户昵称、签名等）则采用<code>本地缓存</code>，大大减少对远端集中式缓存的网络IO次数。</p>\n</li>\n</ul>\n<p>这样一来，系统的响应性能又得到了进一步的提升。</p>\n<p>通过对缓存使用策略的一步步演进，我们可以感受到缓存的恰当使用对系统性能的帮助作用。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"无处不在的缓存\"><a href=\"#无处不在的缓存\" class=\"headerlink\" title=\"无处不在的缓存\"></a>无处不在的缓存</h2><p>缓存存在的初衷，就是为了<strong>兼容两个处理速度不一致的场景对接适配</strong>的。在我们的日常生活中，也常常可以看到“<strong>缓存</strong>”的影子。比如对于几年前比较盛行的那种带桶的净水器（见下图），由于净水的功率比较小，导致实时过滤得到纯净水的水流特别的缓慢，用户倒一杯水要等<code>2分钟</code>，体验太差，所以配了个蓄水桶，净水机先慢慢的将净化后的水存储到桶中，然后用户倒水的时候可以从桶里快速的倒出，无需焦急等待 —— 这个蓄水桶，便是一个<strong>缓存器</strong>。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202209302224417.png\"></p>\n<p>编码源于生活，<code>CPU</code>的<strong>高速缓存</strong>设计就是这一生活实践在计算机领域的原样复制。缓存可以说在软件世界里无处不在，除了我们自己的业务系统外，在<code>网络传输</code>、<code>操作系统</code>、<code>中间件</code>、<code>基础框架</code>中都可以看到缓存的影子。如：</p>\n<ol>\n<li><strong>网络传输场景</strong>。</li>\n</ol>\n<p>比如<code>ARP协议</code>，基于ARP缓存表进行<code>IP</code>与终端硬件<code>MAC</code>地址之间的缓存映射。这样与对端主机之间有通信需求的时候，就可以在ARP缓存中查找到IP对应的对端设备MAC地址，避免每次请求都需要去发送ARP请求查询MAC地址。</p>\n<ol start=\"2\">\n<li><strong>MyBatis的多级缓存</strong>。</li>\n</ol>\n<p><code>MyBatis</code>作为<code>JAVA</code>体系中被广泛使用的数据库操作框架，其内部为了提升处理效率，构建了<strong>一级缓存</strong>与<strong>二级缓存</strong>，大大减少了对<code>SQL</code>的重复执行次数。</p>\n<ol start=\"3\">\n<li><strong>CPU中的缓存</strong>。</li>\n</ol>\n<p><code>CPU</code>与<code>内存</code>之间有个临时存储器（<strong>高速缓存</strong>），容量虽比内存小，但是处理速度却远快于普通内存。高速缓存的机制，有效地解决了<code>CPU运算速度</code>与<code>内存读写速度</code>不匹配的问题。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"缓存的使用场景\"><a href=\"#缓存的使用场景\" class=\"headerlink\" title=\"缓存的使用场景\"></a>缓存的使用场景</h2><p>缓存作为互联网类软件系统架构与实现中的<strong>基石</strong>般的存在，不仅仅是在<em>系统扛压</em>或者<em>接口处理速度提升</em>等性能优化方案，在其他多个方面都可以发挥其独一无二的关键价值。下面就让我们一起来看看缓存都可以用在哪些场景上，可以解决我们哪方面的痛点。</p>\n<h3 id=\"降低自身CPU消耗\"><a href=\"#降低自身CPU消耗\" class=\"headerlink\" title=\"降低自身CPU消耗\"></a>降低自身CPU消耗</h3><p>如前面章节中提到的项目实例，缓存最典型的使用场景就是用在系统的<strong>性能优化</strong>上。而在性能优化层面，一个经典的策略就是“<strong>空间换时间</strong>”。比如：</p>\n<ul>\n<li><strong>在数据库表中做一些字段冗备</strong>。</li>\n</ul>\n<p>比如用户表<code>T_User</code>和部门表<code>T_Department</code>，在<code>T_User</code>表中除了有个<code>Department_Id</code>字段<code>与T_Department</code>表进行关联之外，还额外在<code>T_User</code>表中存储<code>Department_Name</code>值。这样在很多需要展示用户所属部门信息的时候就省去了多表关联查询的操作。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210012126284.png\"></p>\n<ul>\n<li><strong>对一些中间处理结果进行存储</strong>。</li>\n</ul>\n<p>比如系统中的<strong>数据报表</strong>模块，需要对整个系统内所有的关联业务数据进行计算统计，且需要多张表多来源数据之间的综合汇总之后才能得到最终的结果，整个过程的计算非常的耗时。如果借助缓存，则可以将一些<em>中间计算结果</em>进行<strong>暂存</strong>，然后报表请求中基于中间结果进行二次简单处理即可。这样可以大大降低基于请求触发的实时计算量。</p>\n<p>在“<code>空间换时间</code>”实施策略中，<strong>缓存</strong>是该策略的<em>核心</em>、也是被使用的最为广泛的一种方案。借助缓存，可以将一些<code>CPU</code>耗时计算的处理结果进行缓存复用，以降低重复计算工作量，达到降低<code>CPU</code>占用的效果。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"减少对外IO交互\"><a href=\"#减少对外IO交互\" class=\"headerlink\" title=\"减少对外IO交互\"></a>减少对外IO交互</h3><p>上面介绍的使用缓存是为了不断降低请求处理时对自身CPU占用，进而提升服务的处理性能。这里我们介绍缓存的另一典型使用场景，就是减少系统<code>对外依赖</code>的<strong>请求频次</strong>。即通过将一些从远端请求回来的响应结果进行缓存，后面直接使用此缓存结果而无需再次发起网络IO请求交互。</p>\n<p>对于服务端而言，通过构建缓存的方式来减少自身对外的<strong>IO请求</strong>，主要有几个考量出发点：</p>\n<ol>\n<li><p>从<strong>自身性能</strong>层面考虑，减少对外<code>IO操作</code>，降低了对外接口的<code>响应时延</code>，也对服务端自身处理性能有一定提升。</p>\n</li>\n<li><p>从<strong>对端服务</strong>稳定性层面考虑，避免对端服务<code>负载过大</code>。很多时候调用方和被调用方系统的承压能力是不匹配的，甚至有些被调用方系统可能是不承压的。为了避免将对端服务压垮，需要调用方缓存请求结果，<code>降低IO</code>请求。</p>\n</li>\n<li><p>从<strong>自身可靠性</strong>层面而言，将一些远端服务请求到的结果缓存起来，即使远端服务出现故障，自身业务依旧可以基于缓存数据进行正常业务处理，起到一个<code>兜底作用</code>，<strong>提升自身的抗风险能力</strong>。</p>\n</li>\n</ol>\n<p>在分布式系统服务治理范畴内，服务注册管理服务是必不可少的，比如<code>SpringCloud</code>家族的<code>Eureka</code>，或者是<code>Alibaba</code>开源的<code>Nacos</code>。它们对于缓存的利用，可以说是对上面所提几点的完美阐述。</p>\n<p>以<code>Nacos</code>为例：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210012142276.png\"></p>\n<p>除了上述的因素之外，对一些移动端<code>APP</code>或者<code>H5</code>界面而言，缓存的使用还有一个层面的考虑，即<strong>降低用户的流量消耗</strong>，通过将一些资源类数据缓存到本地，避免反复去下载，给用户省点流量，也可以<strong>提升用户的使用体验</strong>（界面渲染速度快，减少出现白屏等待的情况）。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"提升用户个性化体验\"><a href=\"#提升用户个性化体验\" class=\"headerlink\" title=\"提升用户个性化体验\"></a>提升用户个性化体验</h3><p>缓存除了在系统性能提升或系统可靠性兜底等场景发挥价值外，在<code>APP</code>或者<code>web</code>类用户侧产品中，还经常被用于存储一些临时非永久的个性化使用习惯配置或者身份数据，以提升用户的个性化使用体验。</p>\n<ul>\n<li>缓存<code>cookie</code>、<code>session</code>等身份鉴权信息，这样就可以避免用户每次访问都需要进行身份验证。</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202209301615141.png\"></p>\n<ul>\n<li><p>记住一些用户上次<code>操作习惯</code>，比如用户在一个页面上将列表分页查询设置为<code>100</code>条&#x2F;页，则后续在系统内访问其它列表页面时，都沿用这一设置。</p>\n</li>\n<li><p>缓存用户的一些<code>本地设置</code>，这个主要是<code>APP</code>端常用的功能，可以在缓存中保存些与当前设备绑定的设置信息，仅对当前设备有效。比如同一个账号登录某个APP，用户希望在手机端可以显示深色主题，而PAD端则显示浅色主体，这种基于设备的个性化设置，可以缓存到设备本身即可。</p>\n</li>\n</ul>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"业务与缓存的集成模式\"><a href=\"#业务与缓存的集成模式\" class=\"headerlink\" title=\"业务与缓存的集成模式\"></a>业务与缓存的集成模式</h2><p>如前所述，我们可以在不同的方面使用缓存来辅助达成项目在某些方面的诉求。而根据使用场景的不同，在结合缓存进行业务逻辑实现的时候，也会存在不同的<strong>架构模式</strong>，典型的会有<code>旁路型缓存</code>、<code>穿透型缓存</code>与<code>异步型缓存</code>三种。</p>\n<h3 id=\"旁路型缓存\"><a href=\"#旁路型缓存\" class=\"headerlink\" title=\"旁路型缓存\"></a>旁路型缓存</h3><p>在<strong>旁路型缓存</strong>模式中，业务自行负责与缓存以及数据库之间的交互，可以<strong>自由决定缓存未命中场景的处理策略</strong>，更加契合大部分业务场景的定制化诉求。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210032149778.png\"></p>\n<p>由于业务模块自行实现缓存与数据库之间的数据写入与更新的逻辑，实际实现的时候需要注意下在<strong>高并发</strong>场景的<code>数据一致性</code>问题，以及可能会出现的<code>缓存击穿</code>、<code>缓存穿透</code>、<code>缓存雪崩</code>等问题的防护。</p>\n<p>旁路型缓存是实际业务中<strong>最常使用</strong>的一种架构模式，在后面的内容中，我们还会不断的涉及到旁路缓存中相关的内容。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"穿透型缓存\"><a href=\"#穿透型缓存\" class=\"headerlink\" title=\"穿透型缓存\"></a>穿透型缓存</h3><p><strong>穿透型缓存</strong>在实际业务中<em>使用的较少</em>，主要是应用在一些缓存类的中间件中，或者在一些大型系统中专门的数据管理模块中使用。</p>\n<p>一般情况下，业务使用缓存的时候，会是先尝试读取缓存，在尝试读取<code>DB</code>，而使用穿透型缓存架构时，会有专门模块将这些动作封装成黑盒的，业务模块不会与数据库进行直接交互。如下图所示：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210032116685.png\"></p>\n<p>这种模式对业务而言是比较友好的，业务只需调用缓存接口即可，无需自行实现缓存与DB之间的交互策略。</p>\n<h3 id=\"异步型缓存\"><a href=\"#异步型缓存\" class=\"headerlink\" title=\"异步型缓存\"></a>异步型缓存</h3><p>还有一种缓存的使用模式，可以看作是穿透型缓存的演进异化版本，其使用场景也相对较少，即<strong>异步型缓存</strong>。其主要策略就是业务侧请求的实时读写交互都是基于缓存进行，任何数据的读写也完全基于缓存进行操作。此外，<strong>单独实现</strong>一个数据持久化操作(独立线程或者进程中执行)，用于将缓存中变更的数据写入到数据库中。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210032116271.png\"></p>\n<p>这种情况，<strong>实时业务</strong>读写请求完全<strong>基于缓存</strong>进行，而将数据库仅仅作为一个数据持久化存储的备份盘。由于实时业务请求仅与缓存进行交互，所以在性能上可以得到更好的表现。但是这种模式也存在一个致命的问题：数据可靠性！因为是异步操作，所以在下一次数据写入DB前，会有一段时间数据仅存在于缓存中，<strong>一旦缓存服务宕机，这部分数据将会丢失</strong>。所以这种模式仅适用于对数据一致性要求不是特别高的场景。</p>\n<h2 id=\"缓存的优秀实践\"><a href=\"#缓存的优秀实践\" class=\"headerlink\" title=\"缓存的优秀实践\"></a>缓存的优秀实践</h2><p><code>缓存</code>与<code>持久化存储</code>的一个很大的不同点就是缓存的定位应该是一种辅助角色，是一种<strong>锦上添花</strong>般的存在。</p>\n<p><code>缓存</code>也是一把<strong>双刃剑</strong>，基于缓存可以大幅提升我们的系统<em>并发</em>与<em>承压</em>能力，但稍不留神也可能会让我们的系统陷入<strong>灭顶之灾</strong>。所以我们在决定使用缓存的时候，需要知晓缓存设计与使用的一些关键要点，才可以让我们在使用的时候更加游刃有余。</p>\n<h3 id=\"可删除重建\"><a href=\"#可删除重建\" class=\"headerlink\" title=\"可删除重建\"></a>可删除重建</h3><p><strong>可删除重建</strong>，这是缓存与持久化存储最大的一个差别。缓存的定位一定是为了辅助业务处理而生的，也就是说缓存有则使用，没有也不会影响到我们具体的业务运转。此外，即使我们的缓存数据除了问题，我们也可以将其删除重建。</p>\n<p>这一点在<code>APP</code>类的产品中体现的会比较明显。比如对于<code>微信APP</code>的缓存，就有明确的提示说缓存可以删除而不会影响其功能使用：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202209301622198.png\"></p>\n<p>同样地，我们也可以去放心的清理<code>浏览器</code>的缓存，而不用担心清理之后我们浏览器或者网页的功能会出现异常（最多就是需要重新下载或者重建缓存数据，速度会有一些慢）。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202209301702848.png\"></p>\n<p>相同的逻辑，在服务端构建的一些缓存，也应该具备此特性。比如基于内存的缓存，当业务进程重启后，应该有途径可以将缓存重建出来（比如从<code>MySQL</code>中加载数据然后构建缓存，或者是缓存<code>从0开始</code>基于请求触发而构建）。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"有兜底屏障\"><a href=\"#有兜底屏障\" class=\"headerlink\" title=\"有兜底屏障\"></a>有兜底屏障</h3><p>缓存作为高并发类系统中的核心组件，负责抗住大部分的并发请求，一旦缓存组件出问题，往往对整个系统会造成毁灭性的打击。所以我们的缓存在实现的时候必须要有充足且完备的<strong>兜底</strong>与<strong>自恢复</strong>机制。需要做到以下几点：</p>\n<ul>\n<li><p>关注下缓存数据量超出承受范围的处理策略，比如定好数据的<code>淘汰机制</code>。</p>\n</li>\n<li><p>避免缓存集中失效，比如批量加载数据到缓存的时候<code>随机打散</code>过期时间，避免同一时间大批量缓存失效引发<strong>缓存雪崩</strong>问题。</p>\n</li>\n<li><p>有效地<strong>冷数据预热</strong>加载机制，以及<strong>热点数据防过期</strong>机制，避免出现大量对冷数据的请求无法命中缓存或者热点数据突然失效，导致<code>缓存击穿</code>问题。</p>\n</li>\n<li><p>合理的<strong>防身自保</strong>手段，比如采用<code>布隆过滤器</code>机制，避免被恶意请求攻陷，导致<strong>缓存穿透</strong>类的问题。</p>\n</li>\n</ul>\n<p>缓存的可靠性与兜底策略设计，是一个宏大且宽泛的命题，在本系列专栏后续的文章中，我们会逐个深入的探讨。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h3 id=\"关注缓存的一致性保证\"><a href=\"#关注缓存的一致性保证\" class=\"headerlink\" title=\"关注缓存的一致性保证\"></a>关注缓存的一致性保证</h3><p>在高并发类的系统中进行数据更新的时候，缓存与数据库的<code>数据一致性</code>问题，是一个永远无法绕过的话题。对于基于<strong>旁路型缓存</strong>的大部分业务而言，数据更新操作，一般可以组合出几种不同的处理策略：</p>\n<ul>\n<li><p>先更新缓存，再更新数据库</p>\n</li>\n<li><p>先更新数据库， 再更新缓存</p>\n</li>\n<li><p>先删除缓存，再更新数据库</p>\n</li>\n<li><p>先更新数据库，再删除缓存</p>\n</li>\n</ul>\n<p>由于大部分数据库都支持<code>事务</code>，而几乎所有的缓存操作都不具有事务性。所以在一些写操作并发不是特别高且一致性要求不是特别强烈的情况下，可以简单的借助数据库的事务进行控制。比如先更新数据库再更新缓存，如果缓存更新失败则回滚数据库事务。</p>\n<p>然而在一些并发请求特别高的时候，基于事务控制来保证数据一致性往往会对性能造成影响，且事务<code>隔离级别</code>设置的越高影响越大，所以也可以采用一些其它辅助策略，来替代事务的控制，如<code>重试机制</code>、或<code>异步补偿机制</code>、或多者结合方式等。</p>\n<p>比如下图所示的这种策略：</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210041121273.png\"></p>\n<p>上图的数据更新处理策略，可以有效地保证数据的最终一致性，降低极端情况可能出现数据不一致的概率，并兜底增加了数据不一致时的自恢复能力。</p>\n<p>数据一致性保证作为缓存的另一个重要命题，我们会在本系列专栏后续的文章中专门进行深入的剖析。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<h2 id=\"总结回顾\"><a href=\"#总结回顾\" class=\"headerlink\" title=\"总结回顾\"></a>总结回顾</h2><p>本篇文章的内容中，我们对缓存的各个方面进行了一个简单的阐述与了解，也可以看出缓存对于一个软件系统的重要价值。通过对缓存的合理、充分利用，可以大大的增强我们的系统<code>承压性能</code>、提升产品的<code>用户体验</code>。</p>\n<p>缓存作为<strong>高并发系统</strong>中的<code>神兵利器</code>被广泛使用，堪称<strong>高并发系统的基石之一</strong>。而缓存的内容还远远不止我们本篇文档中所介绍的这些、它是一个非常宏大的命题。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202210050750684.png\"></p>\n<p>为了能够将缓存的方方面面彻底的讲透、讲全，在接下来的一段时间里，我会以<strong>系列专栏</strong>的形式，从不同的角度对缓存的方方面面进行探讨。不仅仅着眼于如何去使用缓存、也一起聊聊缓存设计中的一些<code>哲学理念</code> —— 这一点是我觉得更有价值的一点，因为这些理念对提升我们的<strong>软件架构认知</strong>、完善我们的<strong>软件设计思维</strong>有很大的指导与借鉴意义。</p>\n<p>所以，如果你有兴趣，欢迎关注本系列专栏（<a href=\"https://juejin.cn/column/7140852038258147358\">深入理解缓存原理与实战设计</a>），我会以我一贯的行文风格，用<strong>最简单的语言讲透复杂的逻辑</strong>，期待一起切磋、共同成长。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207102124124.gif\"></p>\n<p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p>\n<p>如果觉得有用，请<strong>点赞 + 关注</strong>让我感受到您的支持。也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p>\n<p>期待与你一起探讨，一起成长为更好的自己。</p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207091312091.gif\"></p>\n<p><img src=\"https://pics.codingcoder.cn/pics/202207091317876.png\"></p>\n","text":" 大家好，又见面了。 本文是笔者作为掘金技术社区签约作者的身份输出的缓存专栏系列内容，将会通过系列专题，讲清楚缓存的方方面面。如果感兴趣，欢迎关注以获取后续更新。 在服务端开发中，缓存常常被当做系统性能扛压的不二之选。在实施方案上，缓存使用策略虽有一定普适性，却也并非完全绝对，需...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"缓存实践专栏5","slug":"缓存实践专栏5","count":1,"path":"api/categories/缓存实践专栏5.json"}],"tags":[{"name":"缓存","slug":"缓存","count":4,"path":"api/tags/缓存.json"},{"name":"JAVA","slug":"JAVA","count":4,"path":"api/tags/JAVA.json"},{"name":"高并发","slug":"高并发","count":4,"path":"api/tags/高并发.json"},{"name":"高负载","slug":"高负载","count":4,"path":"api/tags/高负载.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E7%9A%84%E6%BC%94%E8%BF%9B\"><span class=\"toc-text\">缓存使用的演进</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E7%9A%84%E7%89%9B%E5%88%80%E5%B0%8F%E8%AF%95\"><span class=\"toc-text\">本地缓存的牛刀小试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%BC%93%E5%AD%98%E7%9A%84%E5%88%9D%E9%9C%B2%E9%94%8B%E8%8A%92\"><span class=\"toc-text\">集中式缓存的初露锋芒</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E7%9A%84%E7%8F%A0%E8%81%94%E7%92%A7%E5%90%88\"><span class=\"toc-text\">多级缓存的珠联璧合</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">无处不在的缓存</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">缓存的使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%8D%E4%BD%8E%E8%87%AA%E8%BA%ABCPU%E6%B6%88%E8%80%97\"><span class=\"toc-text\">降低自身CPU消耗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%8F%E5%B0%91%E5%AF%B9%E5%A4%96IO%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">减少对外IO交互</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E5%8D%87%E7%94%A8%E6%88%B7%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%93%E9%AA%8C\"><span class=\"toc-text\">提升用户个性化体验</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E4%B8%8E%E7%BC%93%E5%AD%98%E7%9A%84%E9%9B%86%E6%88%90%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">业务与缓存的集成模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%81%E8%B7%AF%E5%9E%8B%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">旁路型缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A9%BF%E9%80%8F%E5%9E%8B%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">穿透型缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%9E%8B%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">异步型缓存</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E7%9A%84%E4%BC%98%E7%A7%80%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">缓存的优秀实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%88%A0%E9%99%A4%E9%87%8D%E5%BB%BA\"><span class=\"toc-text\">可删除重建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%85%9C%E5%BA%95%E5%B1%8F%E9%9A%9C\"><span class=\"toc-text\">有兜底屏障</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E6%B3%A8%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81\"><span class=\"toc-text\">关注缓存的一致性保证</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">总结回顾</span></a></li></ol>","author":{"name":"Veezean","slug":"blog-author","avatar":"https://pics.codingcoder.cn/pics/202301192158457.png","link":"/","description":"多年软件开发与系统架构经验，一起聊聊软件开发技术、系统架构技术、以及程序员最真实可行的职场打怪技能，代码之外的生存软技能。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"juejin":{"icon":"/svg/logo/juejin.svg","link":"https://juejin.cn/user/1028798616709294/posts"},"gongzhonghao":{"icon":"/svg/logo/gongzhonghao.svg","link":null},"github":{"icon":"/svg/logo/github.svg","link":"https://github.com/veezean?tab=repositories"},"cnblogs":{"icon":"/svg/logo/cnblogs.svg","link":"https://www.cnblogs.com/softwarearch"},"tencentcloud":{"icon":"/svg/logo/tencentcloud.svg","link":"https://cloud.tencent.com/developer/user/7082425/articles"},"toutiaohao":{"icon":"/svg/logo/toutiaohao.svg","link":"https://www.toutiao.com/c/user/token/MS4wLjABAAAA1iRfiAWyVlhlGsUE_zq38F9FS3FRx5FuKzOZO3cFsiI/?source=mine_profile&log_from=3ee8b793e0a65_1674178316319&tab=article"}}}},"mapped":true,"prev_post":{"title":"聊一聊作为高并发系统基石之一的缓存，会用很简单，用好才是技术活","uid":"7af923229c8359748f91fb0bb5dd4c72","slug":"2023/hello-world3","date":"2022-11-16T16:00:00.000Z","updated":"2023-01-20T05:06:40.738Z","comments":true,"path":"api/articles/2023/hello-world3.json","keywords":"JAVA 架构 中间件 Spring","cover":[],"text":" 大家好，又见面了。 本文是笔者作为掘金技术社区签约作者的身份输出的缓存专栏系列内容，将会通过系列专题，讲清楚缓存的方方面面。如果感兴趣，欢迎关注以获取后续更新。 在服务端开发中，缓存常常被当做系统性能扛压的不二之选。在实施方案上，缓存使用策略虽有一定普适性，却也并非完全绝对，需...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"缓存实践专栏1","slug":"缓存实践专栏1","count":1,"path":"api/categories/缓存实践专栏1.json"}],"tags":[{"name":"缓存","slug":"缓存","count":4,"path":"api/tags/缓存.json"},{"name":"JAVA","slug":"JAVA","count":4,"path":"api/tags/JAVA.json"},{"name":"高并发","slug":"高并发","count":4,"path":"api/tags/高并发.json"},{"name":"高负载","slug":"高负载","count":4,"path":"api/tags/高负载.json"}],"author":{"name":"Veezean","slug":"blog-author","avatar":"https://pics.codingcoder.cn/pics/202301192158457.png","link":"/","description":"多年软件开发与系统架构经验，一起聊聊软件开发技术、系统架构技术、以及程序员最真实可行的职场打怪技能，代码之外的生存软技能。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"juejin":{"icon":"/svg/logo/juejin.svg","link":"https://juejin.cn/user/1028798616709294/posts"},"gongzhonghao":{"icon":"/svg/logo/gongzhonghao.svg","link":null},"github":{"icon":"/svg/logo/github.svg","link":"https://github.com/veezean?tab=repositories"},"cnblogs":{"icon":"/svg/logo/cnblogs.svg","link":"https://www.cnblogs.com/softwarearch"},"tencentcloud":{"icon":"/svg/logo/tencentcloud.svg","link":"https://cloud.tencent.com/developer/user/7082425/articles"},"toutiaohao":{"icon":"/svg/logo/toutiaohao.svg","link":"https://www.toutiao.com/c/user/token/MS4wLjABAAAA1iRfiAWyVlhlGsUE_zq38F9FS3FRx5FuKzOZO3cFsiI/?source=mine_profile&log_from=3ee8b793e0a65_1674178316319&tab=article"}}}}},"next_post":{}}