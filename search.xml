<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全面吃透JAVA Stream流操作，让代码更加的优雅</title>
      <link href="//post/20230127180910.html"/>
      <url>//post/20230127180910.html</url>
      
        <content type="html"><![CDATA[<p>在JAVA中，涉及到对 <code>数组</code>、<code>Collection</code>等集合类中的元素进行操作的时候，通常会通过<strong>循环的方式</strong>进行逐个处理，或者<strong>使用Stream</strong>的方式进行处理。</p><p>例如，现在有这么一个需求：</p><blockquote><p>从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个</p></blockquote><p>在<strong>JAVA7及之前</strong>的代码中，我们会可以照如下的方式进行实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 【常规方式】 * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 * * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔 * @return 倒序输出符合条件的单词列表 *&#x2F;public List&lt;String&gt; sortGetTop3LongWords(@NotNull String sentence) &#123;    &#x2F;&#x2F; 先切割句子，获取具体的单词信息    String[] words &#x3D; sentence.split(&quot; &quot;);    List&lt;String&gt; wordList &#x3D; new ArrayList&lt;&gt;();    &#x2F;&#x2F; 循环判断单词的长度，先过滤出符合长度要求的单词    for (String word : words) &#123;        if (word.length() &gt; 5) &#123;            wordList.add(word);        &#125;    &#125;    &#x2F;&#x2F; 对符合条件的列表按照长度进行排序    wordList.sort((o1, o2) -&gt; o2.length() - o1.length());    &#x2F;&#x2F; 判断list结果长度，如果大于3则截取前三个数据的子list返回    if (wordList.size() &gt; 3) &#123;        wordList &#x3D; wordList.subList(0, 3);    &#125;    return wordList;&#125;</code></pre><p>在<strong>JAVA8及之后</strong>的版本中，借助Stream流，我们可以更加优雅的写出如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 【Stream方式】 * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 * * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔 * @return 倒序输出符合条件的单词列表 *&#x2F;public List&lt;String&gt; sortGetTop3LongWordsByStream(@NotNull String sentence) &#123;    return Arrays.stream(sentence.split(&quot; &quot;))            .filter(word -&gt; word.length() &gt; 5)            .sorted((o1, o2) -&gt; o2.length() - o1.length())            .limit(3)            .collect(Collectors.toList());&#125;</code></pre><p>直观感受上，<code>Stream</code>的实现方式代码更加简洁、一气呵成。很多的同学在代码中也经常使用Stream流，但是对Stream流的认知往往也是仅限于会一些简单的 <code>filter</code>、<code>map</code>、<code>collect</code>等操作，但JAVA的Stream可以适用的场景与能力远不止这些。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p>那么问题来了：<strong>Stream相较于传统的foreach的方式处理，到底有啥优势</strong>？</p><p>这里我们可以先搁置这个问题，先整体全面的了解下Stream，然后再来讨论下这个问题。</p><p>笔者结合在团队中多年的代码检视遇到的情况，结合平时项目编码实践经验，对<strong>Stream的核心要点与易混淆用法</strong>、<strong>典型使用场景</strong>等进行了详细的梳理总结，希望可以帮助大家对Stream有个更全面的认知，也可以更加高效的应用到项目开发中去。</p><h2 id="Stream初相识"><a href="#Stream初相识" class="headerlink" title="Stream初相识"></a>Stream初相识</h2><p>概括讲，可以将Stream流操作分为<strong>3种类型</strong>：</p><ul><li>创建Stream</li><li>Stream中间处理</li><li>终止Steam</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207101448482.png"></p><p>每个Stream管道操作类型都包含若干API方法，先列举下各个API方法的功能介绍。</p><ul><li><strong>开始管道</strong></li></ul><p>主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>stream()</td><td>创建出一个新的stream串行流对象</td></tr><tr><td>parallelStream()</td><td>创建出一个可并行执行的stream流对象</td></tr><tr><td>Stream.of()</td><td>通过给定的一系列元素创建一个新的Stream串行流对象</td></tr></tbody></table><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><ul><li><strong>中间管道</strong></li></ul><p>负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行<strong>叠加</strong>。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>filter()</td><td>按照条件过滤符合要求的元素， 返回新的stream流</td></tr><tr><td>map()</td><td>将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流</td></tr><tr><td>flatMap()</td><td>将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流</td></tr><tr><td>limit()</td><td>仅保留集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>skip()</td><td>跳过集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>concat()</td><td>将两个流的数据合并起来为1个新的流，返回新的stream流</td></tr><tr><td>distinct()</td><td>对Stream中所有元素进行去重，返回新的stream流</td></tr><tr><td>sorted()</td><td>对stream中所有的元素按照指定规则进行排序，返回新的stream流</td></tr><tr><td>peek()</td><td>对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流</td></tr></tbody></table><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><ul><li><strong>终止管道</strong></li></ul><p>顾名思义，通过终止管道操作之后，Stream流将<strong>会结束</strong>，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>count()</td><td>返回stream处理后最终的元素个数</td></tr><tr><td>max()</td><td>返回stream处理后的元素最大值</td></tr><tr><td>min()</td><td>返回stream处理后的元素最小值</td></tr><tr><td>findFirst()</td><td>找到第一个符合条件的元素时则终止流处理</td></tr><tr><td>findAny()</td><td>找到任何一个符合条件的元素时则退出流处理，这个<strong>对于串行流时与findFirst相同，对于并行流时比较高效</strong>，任何分片中找到都会终止后续计算逻辑</td></tr><tr><td>anyMatch()</td><td>返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素</td></tr><tr><td>allMatch()</td><td>返回一个boolean值，用于判断是否所有元素都符合条件</td></tr><tr><td>noneMatch()</td><td>返回一个boolean值， 用于判断是否所有元素都不符合条件</td></tr><tr><td>collect()</td><td>将流转换为指定的类型，通过Collectors进行指定</td></tr><tr><td>toArray()</td><td>将流转换为数组</td></tr><tr><td>iterator()</td><td>将流转换为Iterator对象</td></tr><tr><td>foreach()</td><td>无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑</td></tr></tbody></table><h2 id="Stream方法使用"><a href="#Stream方法使用" class="headerlink" title="Stream方法使用"></a>Stream方法使用</h2><h3 id="map与flatMap"><a href="#map与flatMap" class="headerlink" title="map与flatMap"></a>map与flatMap</h3><p><code>map</code>与 <code>flatMap</code>都是用于转换已有的元素为其它元素，区别点在于：</p><ul><li>map <strong>必须是一对一的</strong>，即每个元素都只能转换为1个新的元素</li><li>flatMap <strong>可以是一对多的</strong>，即每个元素都可以转换为1个或者多个新的元素</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207101616088.png"></p><p>比如：<strong>有一个字符串ID列表，现在需要将其转为User对象列表</strong>。可以使用map来实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 演示map的用途：一对一转换 *&#x2F;public void stringToIntMap() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;105&quot;, &quot;308&quot;, &quot;469&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;User&gt; results &#x3D; ids.stream()            .map(id -&gt; &#123;                User user &#x3D; new User();                user.setId(id);                return user;            &#125;)            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>执行之后，会发现每一个元素都被转换为对应新的元素，但是前后总元素个数是一致的：</p><pre class="line-numbers language-none"><code class="language-none">[User&#123;id&#x3D;&#39;205&#39;&#125;,  User&#123;id&#x3D;&#39;105&#39;&#125;, User&#123;id&#x3D;&#39;308&#39;&#125;,  User&#123;id&#x3D;&#39;469&#39;&#125;,  User&#123;id&#x3D;&#39;627&#39;&#125;,  User&#123;id&#x3D;&#39;193&#39;&#125;,  User&#123;id&#x3D;&#39;111&#39;&#125;]</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p>再比如：<strong>现有一个句子列表，需要将句子中每个单词都提取出来得到一个所有单词列表</strong>。这种情况用map就搞不定了，需要 <code>flatMap</code>上场了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void stringToIntFlatmap() &#123;    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;String&gt; results &#x3D; sentences.stream()            .flatMap(sentence -&gt; Arrays.stream(sentence.split(&quot; &quot;)))            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>执行结果如下，可以看到结果列表中元素个数是比原始列表元素个数要多的：</p><pre class="line-numbers language-none"><code class="language-none">[hello, world, Jia, Gou, Wu, Dao]</code></pre><p>这里需要补充一句，<code>flatMap</code>操作的时候其实是先每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream，如下：</p><p><img src="https://pics.codingcoder.cn/pics/202207101630745.png"></p><h3 id="peek和foreach方法"><a href="#peek和foreach方法" class="headerlink" title="peek和foreach方法"></a>peek和foreach方法</h3><p><code>peek</code>和 <code>foreach</code>，都可以用于对元素进行遍历然后逐个的进行处理。</p><p>但根据前面的介绍，<strong>peek属于中间方法</strong>，而<strong>foreach属于终止方法</strong>。这也就意味着peek只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；而foreach作为无返回值的终止方法，则可以直接执行相关操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testPeekAndforeach() &#123;    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);    &#x2F;&#x2F; 演示点1： 仅peek操作，最终不会执行    System.out.println(&quot;----before peek----&quot;);    sentences.stream().peek(sentence -&gt; System.out.println(sentence));    System.out.println(&quot;----after peek----&quot;);    &#x2F;&#x2F; 演示点2： 仅foreach操作，最终会执行    System.out.println(&quot;----before foreach----&quot;);    sentences.stream().forEach(sentence -&gt; System.out.println(sentence));    System.out.println(&quot;----after foreach----&quot;);    &#x2F;&#x2F; 演示点3： peek操作后面增加终止操作，peek会执行    System.out.println(&quot;----before peek and count----&quot;);    sentences.stream().peek(sentence -&gt; System.out.println(sentence)).count();    System.out.println(&quot;----after peek and count----&quot;);&#125;</code></pre><p>输出结果可以看出，peek独自调用时并没有被执行、但peek后面加上终止操作之后便可以被执行，而foreach可以直接被执行：</p><pre class="line-numbers language-none"><code class="language-none">----before peek--------after peek--------before foreach----hello worldJia Gou Wu Dao----after foreach--------before peek and count----hello worldJia Gou Wu Dao----after peek and count----</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="filter、sorted、distinct、limit"><a href="#filter、sorted、distinct、limit" class="headerlink" title="filter、sorted、distinct、limit"></a>filter、sorted、distinct、limit</h3><p>这几个都是常用的Stream的中间操作方法，具体的方法的含义在上面的表格里面有说明。具体使用的时候，<strong>可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testGetTargetUsers() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;,&quot;10&quot;,&quot;308&quot;,&quot;49&quot;,&quot;627&quot;,&quot;193&quot;,&quot;111&quot;, &quot;193&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;Dept&gt; results &#x3D; ids.stream()            .filter(s -&gt; s.length() &gt; 2)            .distinct()            .map(Integer::valueOf)            .sorted(Comparator.comparingInt(o -&gt; o))            .limit(3)            .map(id -&gt; new Dept(id))            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>上面的代码片段的处理逻辑很清晰：</p><ol><li>使用filter过滤掉不符合条件的数据</li><li>通过distinct对存量元素进行去重操作</li><li>通过map操作将字符串转成整数类型</li><li>借助sorted指定按照数字大小正序排列</li><li>使用limit截取排在前3位的元素</li><li>又一次使用map将id转为Dept对象类型</li><li>使用collect终止操作将最终处理后的数据收集到list中</li></ol><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">[Dept&#123;id&#x3D;111&#125;,  Dept&#123;id&#x3D;193&#125;,  Dept&#123;id&#x3D;205&#125;]</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="简单结果终止方法"><a href="#简单结果终止方法" class="headerlink" title="简单结果终止方法"></a>简单结果终止方法</h3><p>按照前面介绍的，终止方法里面像 <code>count</code>、<code>max</code>、<code>min</code>、<code>findAny</code>、<code>findFirst</code>、<code>anyMatch</code>、<code>allMatch</code>、<code>noneMatch</code>等方法，均属于这里说的简单结果终止方法。所谓简单，指的是其结果形式是数字、布尔值或者Optional对象值等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testSimpleStopOptions() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    &#x2F;&#x2F; 统计stream操作后剩余的元素个数    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).count());    &#x2F;&#x2F; 判断是否有元素值等于205    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).anyMatch(&quot;205&quot;::equals));    &#x2F;&#x2F; findFirst操作    ids.stream().filter(s -&gt; s.length() &gt; 2)            .findFirst()            .ifPresent(s -&gt; System.out.println(&quot;findFirst:&quot; + s));&#125;</code></pre><p>执行后结果为：</p><pre class="line-numbers language-none"><code class="language-none">6truefindFirst:205</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>避坑提醒</strong></p><p>这里需要补充提醒下，<strong>一旦一个Stream被执行了终止操作之后，后续便不可以再读这个流执行其他的操作</strong>了，否则会报错，看下面示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testHandleStreamAfterClosed() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    Stream&lt;String&gt; stream &#x3D; ids.stream().filter(s -&gt; s.length() &gt; 2);    &#x2F;&#x2F; 统计stream操作后剩余的元素个数    System.out.println(stream.count());    System.out.println(&quot;-----下面会报错-----&quot;);    &#x2F;&#x2F; 判断是否有元素值等于205    try &#123;        System.out.println(stream.anyMatch(&quot;205&quot;::equals));    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;    System.out.println(&quot;-----上面会报错-----&quot;);&#125;</code></pre><p>执行的时候，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">6-----下面会报错-----java.lang.IllegalStateException: stream has already been operated upon or closedat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:229)at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)at com.veezean.skills.stream.StreamService.testHandleStreamAfterClosed(StreamService.java:153)at com.veezean.skills.stream.StreamService.main(StreamService.java:176)-----上面会报错-----</code></pre><p>因为stream已经被执行 <code>count()</code>终止方法了，所以对stream再执行 <code>anyMatch</code>方法的时候，就会报错 <code>stream has already been operated upon or closed</code>，这一点在使用的时候需要特别注意。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="结果收集终止方法"><a href="#结果收集终止方法" class="headerlink" title="结果收集终止方法"></a>结果收集终止方法</h3><p>因为Stream主要用于对集合数据的处理场景，所以除了上面几种获取简单结果的终止方法之外，更多的场景是获取一个集合类的结果对象，比如List、Set或者HashMap等。</p><p>这里就需要 <code>collect</code>方法出场了，它可以支持生成如下类型的结果数据：</p><ul><li>一个 <code>集合类</code>，比如List、Set或者HashMap等</li><li>StringBuilder对象，支持将多个 <code>字符串进行拼接</code>处理并输出拼接后结果</li><li>一个可以记录个数或者计算总和的对象（<code>数据批量运算统计</code>）</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="生成集合"><a href="#生成集合" class="headerlink" title="生成集合"></a>生成集合</h4><p>应该算是collect最常被使用到的一个场景了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testCollectStopOptions() &#123;    List&lt;Dept&gt; ids &#x3D; Arrays.asList(new Dept(17), new Dept(22), new Dept(23));    &#x2F;&#x2F; collect成list    List&lt;Dept&gt; collectList &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toList());    System.out.println(&quot;collectList:&quot; + collectList);    &#x2F;&#x2F; collect成Set    Set&lt;Dept&gt; collectSet &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toSet());    System.out.println(&quot;collectSet:&quot; + collectSet);    &#x2F;&#x2F; collect成HashMap，key为id，value为Dept对象    Map&lt;Integer, Dept&gt; collectMap &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toMap(Dept::getId, dept -&gt; dept));    System.out.println(&quot;collectMap:&quot; + collectMap);&#125;</code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">collectList:[Dept&#123;id&#x3D;22&#125;, Dept&#123;id&#x3D;23&#125;]collectSet:[Dept&#123;id&#x3D;23&#125;, Dept&#123;id&#x3D;22&#125;]collectMap:&#123;22&#x3D;Dept&#123;id&#x3D;22&#125;, 23&#x3D;Dept&#123;id&#x3D;23&#125;&#125;</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="生成拼接字符串"><a href="#生成拼接字符串" class="headerlink" title="生成拼接字符串"></a>生成拼接字符串</h4><p><strong>将一个List或者数组中的值拼接到一个字符串里并以逗号分隔开</strong>，这个场景相信大家都不陌生吧？</p><p>如果通过 <code>for</code>循环和 <code>StringBuilder</code>去循环拼接，还得考虑下最后一个逗号如何处理的问题，很繁琐:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testForJoinStrings() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    StringBuilder builder &#x3D; new StringBuilder();    for (String id : ids) &#123;        builder.append(id).append(&#39;,&#39;);    &#125;    &#x2F;&#x2F; 去掉末尾多拼接的逗号    builder.deleteCharAt(builder.length() - 1);    System.out.println(&quot;拼接后：&quot; + builder.toString());&#125;</code></pre><p>但是现在有了Stream，使用 <code>collect</code>可以轻而易举的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testCollectJoinStrings() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    String joinResult &#x3D; ids.stream().collect(Collectors.joining(&quot;,&quot;));    System.out.println(&quot;拼接后：&quot; + joinResult);&#125;</code></pre><p>两种方式都可以得到完全相同的结果，但Stream的方式更优雅：</p><pre class="line-numbers language-none"><code class="language-none">拼接后：205,10,308,49,627,193,111,193</code></pre><p>📢 <strong>敲黑板：</strong></p><p>关于这里的说明，评论区中很多的小伙伴提出过疑问，就是这个场景其实使用 <code>String.join()</code> 就可以搞定了，并不需要上面使用 <code>stream</code> 的方式去实现。这里要声明下，<strong>Stream的魅力之处就在于其可以结合到其它的业务逻辑中进行处理</strong>，让代码逻辑更加的自然、一气呵成。如果纯粹是个String字符串拼接的诉求，确实没有必要使用Stream来实现，毕竟杀鸡焉用牛刀嘛~ 但是可以看看下面给出的这个示例，便可以感受出使用Stream进行字符串拼接的真正魅力所在。</p><p><img src="https://pics.codingcoder.cn/pics/202209241126617.png"></p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="数据批量数学运算"><a href="#数据批量数学运算" class="headerlink" title="数据批量数学运算"></a>数据批量数学运算</h4><p>还有一种场景，实际使用的时候可能会比较少，就是使用collect生成数字数据的总和信息，也可以了解下实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testNumberCalculate() &#123;    List&lt;Integer&gt; ids &#x3D; Arrays.asList(10, 20, 30, 40, 50);    &#x2F;&#x2F; 计算平均值    Double average &#x3D; ids.stream().collect(Collectors.averagingInt(value -&gt; value));    System.out.println(&quot;平均值：&quot; + average);    &#x2F;&#x2F; 数据统计信息    IntSummaryStatistics summary &#x3D; ids.stream().collect(Collectors.summarizingInt(value -&gt; value));    System.out.println(&quot;数据统计信息： &quot; + summary);&#125;</code></pre><p>上面的例子中，使用collect方法来对list中元素值进行数学运算，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">平均值：30.0总和： IntSummaryStatistics&#123;count&#x3D;5, sum&#x3D;150, min&#x3D;10, average&#x3D;30.000000, max&#x3D;50&#125;</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="并行Stream"><a href="#并行Stream" class="headerlink" title="并行Stream"></a>并行Stream</h2><h3 id="机制说明"><a href="#机制说明" class="headerlink" title="机制说明"></a>机制说明</h3><p>使用并行流，可以有效利用计算机的多CPU硬件，提升逻辑的执行速度。并行流通过将一整个stream划分为 <code>多个片段</code>，然后对各个分片流并行执行处理逻辑，最后将各个分片流的执行结果汇总为一个整体流。</p><p><img src="https://pics.codingcoder.cn/pics/202207102118100.png"></p><h3 id="约束与限制"><a href="#约束与限制" class="headerlink" title="约束与限制"></a>约束与限制</h3><p>并行流类似于多线程在并行处理，所以与多线程场景相关的一些问题同样会存在，比如死锁等问题，所以在并行流终止执行的函数逻辑，必须要保证<strong>线程安全</strong>。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="回答最初的问题"><a href="#回答最初的问题" class="headerlink" title="回答最初的问题"></a>回答最初的问题</h2><p>到这里，关于JAVA Stream的相关概念与用法介绍，基本就讲完了。我们再把焦点切回本文刚开始时提及的一个问题：</p><p><strong>Stream相较于传统的foreach的方式处理stream，到底有啥优势</strong>？</p><p>根据前面的介绍，我们应该可以得出如下几点答案：</p><ul><li><strong>代码更简洁</strong>、偏声明式的编码风格，更容易体现出代码的逻辑意图</li><li><strong>逻辑间解耦</strong>，一个stream中间处理逻辑，无需关注上游与下游的内容，只需要按约定实现自身逻辑即可</li><li>并行流场景<strong>效率</strong>会比迭代器逐个循环更高</li><li>函数式接口，<strong>延迟执行</strong>的特性，中间管道操作不管有多少步骤都不会立即执行，只有遇到终止操作的时候才会开始执行，可以避免一些中间不必要的操作消耗</li></ul><p>当然了，Stream也不全是优点，在有些方面也有其弊端：</p><ul><li>代码调测debug不便</li><li>程序员从历史写法切换到Stream时，需要一定的适应时间</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好啦，关于JAVA Stream的理解要点与使用技能的阐述就先到这里啦。那通过上面的介绍，各位小伙伴们是否已经跃跃欲试了呢？快去项目中使用体验下吧！当然啦，如果有疑问，也欢迎找我一起探讨探讨咯。</p><p><strong>此外</strong>：</p><ul><li>关于<strong>Stream中collect的分组、分片等进阶操作，以及对并行流的深入探讨</strong>，因为涉及内容比较多且相对独立，<strong>我会在后续的文档中展开专门介绍下</strong>，如果有兴趣的话，可以点个关注、避免迷路。</li><li>关于本文中涉及的<strong>演示代码</strong>的完整示例，我已经整理并提交到github中，如果您有需要，可以自取：<a href="https://github.com/veezean/JavaBasicSkills">https://github.com/veezean/JavaBasicSkills</a></li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p><p>如果觉得有用，请点个关注，也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p><p>期待与你一起探讨，一起成长为更好的自己。</p><p><img src="https://pics.codingcoder.cn/pics/202207091312091.gif"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>吧vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv</title>
      <link href="//post/20230127180910.html"/>
      <url>//post/20230127180910.html</url>
      
        <content type="html"><![CDATA[<p>在JAVA中，涉及到对 <code>数组</code>、<code>Collection</code>等集合类中的元素进行操作的时候，通常会通过<strong>循环的方式</strong>进行逐个处理，或者<strong>使用Stream</strong>的方式进行处理。</p><p>例如，现在有这么一个需求：</p><blockquote><p>从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个</p></blockquote><p>在<strong>JAVA7及之前</strong>的代码中，我们会可以照如下的方式进行实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 【常规方式】 * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 * * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔 * @return 倒序输出符合条件的单词列表 *&#x2F;public List&lt;String&gt; sortGetTop3LongWords(@NotNull String sentence) &#123;    &#x2F;&#x2F; 先切割句子，获取具体的单词信息    String[] words &#x3D; sentence.split(&quot; &quot;);    List&lt;String&gt; wordList &#x3D; new ArrayList&lt;&gt;();    &#x2F;&#x2F; 循环判断单词的长度，先过滤出符合长度要求的单词    for (String word : words) &#123;        if (word.length() &gt; 5) &#123;            wordList.add(word);        &#125;    &#125;    &#x2F;&#x2F; 对符合条件的列表按照长度进行排序    wordList.sort((o1, o2) -&gt; o2.length() - o1.length());    &#x2F;&#x2F; 判断list结果长度，如果大于3则截取前三个数据的子list返回    if (wordList.size() &gt; 3) &#123;        wordList &#x3D; wordList.subList(0, 3);    &#125;    return wordList;&#125;</code></pre><p>在<strong>JAVA8及之后</strong>的版本中，借助Stream流，我们可以更加优雅的写出如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 【Stream方式】 * 从给定句子中返回单词长度大于5的单词列表，按长度倒序输出，最多返回3个 * * @param sentence 给定的句子，约定非空，且单词之间仅由一个空格分隔 * @return 倒序输出符合条件的单词列表 *&#x2F;public List&lt;String&gt; sortGetTop3LongWordsByStream(@NotNull String sentence) &#123;    return Arrays.stream(sentence.split(&quot; &quot;))            .filter(word -&gt; word.length() &gt; 5)            .sorted((o1, o2) -&gt; o2.length() - o1.length())            .limit(3)            .collect(Collectors.toList());&#125;</code></pre><p>直观感受上，<code>Stream</code>的实现方式代码更加简洁、一气呵成。很多的同学在代码中也经常使用Stream流，但是对Stream流的认知往往也是仅限于会一些简单的 <code>filter</code>、<code>map</code>、<code>collect</code>等操作，但JAVA的Stream可以适用的场景与能力远不止这些。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p>那么问题来了：<strong>Stream相较于传统的foreach的方式处理，到底有啥优势</strong>？</p><p>这里我们可以先搁置这个问题，先整体全面的了解下Stream，然后再来讨论下这个问题。</p><p>笔者结合在团队中多年的代码检视遇到的情况，结合平时项目编码实践经验，对<strong>Stream的核心要点与易混淆用法</strong>、<strong>典型使用场景</strong>等进行了详细的梳理总结，希望可以帮助大家对Stream有个更全面的认知，也可以更加高效的应用到项目开发中去。</p><h2 id="Stream初相识"><a href="#Stream初相识" class="headerlink" title="Stream初相识"></a>Stream初相识</h2><p>概括讲，可以将Stream流操作分为<strong>3种类型</strong>：</p><ul><li>创建Stream</li><li>Stream中间处理</li><li>终止Steam</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207101448482.png"></p><p>每个Stream管道操作类型都包含若干API方法，先列举下各个API方法的功能介绍。</p><ul><li><strong>开始管道</strong></li></ul><p>主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>stream()</td><td>创建出一个新的stream串行流对象</td></tr><tr><td>parallelStream()</td><td>创建出一个可并行执行的stream流对象</td></tr><tr><td>Stream.of()</td><td>通过给定的一系列元素创建一个新的Stream串行流对象</td></tr></tbody></table><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><ul><li><strong>中间管道</strong></li></ul><p>负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行<strong>叠加</strong>。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>filter()</td><td>按照条件过滤符合要求的元素， 返回新的stream流</td></tr><tr><td>map()</td><td>将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流</td></tr><tr><td>flatMap()</td><td>将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流</td></tr><tr><td>limit()</td><td>仅保留集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>skip()</td><td>跳过集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>concat()</td><td>将两个流的数据合并起来为1个新的流，返回新的stream流</td></tr><tr><td>distinct()</td><td>对Stream中所有元素进行去重，返回新的stream流</td></tr><tr><td>sorted()</td><td>对stream中所有的元素按照指定规则进行排序，返回新的stream流</td></tr><tr><td>peek()</td><td>对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流</td></tr></tbody></table><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><ul><li><strong>终止管道</strong></li></ul><p>顾名思义，通过终止管道操作之后，Stream流将<strong>会结束</strong>，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。</p><table><thead><tr><th>API</th><th>功能说明</th></tr></thead><tbody><tr><td>count()</td><td>返回stream处理后最终的元素个数</td></tr><tr><td>max()</td><td>返回stream处理后的元素最大值</td></tr><tr><td>min()</td><td>返回stream处理后的元素最小值</td></tr><tr><td>findFirst()</td><td>找到第一个符合条件的元素时则终止流处理</td></tr><tr><td>findAny()</td><td>找到任何一个符合条件的元素时则退出流处理，这个<strong>对于串行流时与findFirst相同，对于并行流时比较高效</strong>，任何分片中找到都会终止后续计算逻辑</td></tr><tr><td>anyMatch()</td><td>返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素</td></tr><tr><td>allMatch()</td><td>返回一个boolean值，用于判断是否所有元素都符合条件</td></tr><tr><td>noneMatch()</td><td>返回一个boolean值， 用于判断是否所有元素都不符合条件</td></tr><tr><td>collect()</td><td>将流转换为指定的类型，通过Collectors进行指定</td></tr><tr><td>toArray()</td><td>将流转换为数组</td></tr><tr><td>iterator()</td><td>将流转换为Iterator对象</td></tr><tr><td>foreach()</td><td>无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑</td></tr></tbody></table><h2 id="Stream方法使用"><a href="#Stream方法使用" class="headerlink" title="Stream方法使用"></a>Stream方法使用</h2><h3 id="map与flatMap"><a href="#map与flatMap" class="headerlink" title="map与flatMap"></a>map与flatMap</h3><p><code>map</code>与 <code>flatMap</code>都是用于转换已有的元素为其它元素，区别点在于：</p><ul><li>map <strong>必须是一对一的</strong>，即每个元素都只能转换为1个新的元素</li><li>flatMap <strong>可以是一对多的</strong>，即每个元素都可以转换为1个或者多个新的元素</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207101616088.png"></p><p>比如：<strong>有一个字符串ID列表，现在需要将其转为User对象列表</strong>。可以使用map来实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * 演示map的用途：一对一转换 *&#x2F;public void stringToIntMap() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;105&quot;, &quot;308&quot;, &quot;469&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;User&gt; results &#x3D; ids.stream()            .map(id -&gt; &#123;                User user &#x3D; new User();                user.setId(id);                return user;            &#125;)            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>执行之后，会发现每一个元素都被转换为对应新的元素，但是前后总元素个数是一致的：</p><pre class="line-numbers language-none"><code class="language-none">[User&#123;id&#x3D;&#39;205&#39;&#125;,  User&#123;id&#x3D;&#39;105&#39;&#125;, User&#123;id&#x3D;&#39;308&#39;&#125;,  User&#123;id&#x3D;&#39;469&#39;&#125;,  User&#123;id&#x3D;&#39;627&#39;&#125;,  User&#123;id&#x3D;&#39;193&#39;&#125;,  User&#123;id&#x3D;&#39;111&#39;&#125;]</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p>再比如：<strong>现有一个句子列表，需要将句子中每个单词都提取出来得到一个所有单词列表</strong>。这种情况用map就搞不定了，需要 <code>flatMap</code>上场了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void stringToIntFlatmap() &#123;    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;String&gt; results &#x3D; sentences.stream()            .flatMap(sentence -&gt; Arrays.stream(sentence.split(&quot; &quot;)))            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>执行结果如下，可以看到结果列表中元素个数是比原始列表元素个数要多的：</p><pre class="line-numbers language-none"><code class="language-none">[hello, world, Jia, Gou, Wu, Dao]</code></pre><p>这里需要补充一句，<code>flatMap</code>操作的时候其实是先每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream，如下：</p><p><img src="https://pics.codingcoder.cn/pics/202207101630745.png"></p><h3 id="peek和foreach方法"><a href="#peek和foreach方法" class="headerlink" title="peek和foreach方法"></a>peek和foreach方法</h3><p><code>peek</code>和 <code>foreach</code>，都可以用于对元素进行遍历然后逐个的进行处理。</p><p>但根据前面的介绍，<strong>peek属于中间方法</strong>，而<strong>foreach属于终止方法</strong>。这也就意味着peek只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；而foreach作为无返回值的终止方法，则可以直接执行相关操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testPeekAndforeach() &#123;    List&lt;String&gt; sentences &#x3D; Arrays.asList(&quot;hello world&quot;,&quot;Jia Gou Wu Dao&quot;);    &#x2F;&#x2F; 演示点1： 仅peek操作，最终不会执行    System.out.println(&quot;----before peek----&quot;);    sentences.stream().peek(sentence -&gt; System.out.println(sentence));    System.out.println(&quot;----after peek----&quot;);    &#x2F;&#x2F; 演示点2： 仅foreach操作，最终会执行    System.out.println(&quot;----before foreach----&quot;);    sentences.stream().forEach(sentence -&gt; System.out.println(sentence));    System.out.println(&quot;----after foreach----&quot;);    &#x2F;&#x2F; 演示点3： peek操作后面增加终止操作，peek会执行    System.out.println(&quot;----before peek and count----&quot;);    sentences.stream().peek(sentence -&gt; System.out.println(sentence)).count();    System.out.println(&quot;----after peek and count----&quot;);&#125;</code></pre><p>输出结果可以看出，peek独自调用时并没有被执行、但peek后面加上终止操作之后便可以被执行，而foreach可以直接被执行：</p><pre class="line-numbers language-none"><code class="language-none">----before peek--------after peek--------before foreach----hello worldJia Gou Wu Dao----after foreach--------before peek and count----hello worldJia Gou Wu Dao----after peek and count----</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="filter、sorted、distinct、limit"><a href="#filter、sorted、distinct、limit" class="headerlink" title="filter、sorted、distinct、limit"></a>filter、sorted、distinct、limit</h3><p>这几个都是常用的Stream的中间操作方法，具体的方法的含义在上面的表格里面有说明。具体使用的时候，<strong>可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testGetTargetUsers() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;,&quot;10&quot;,&quot;308&quot;,&quot;49&quot;,&quot;627&quot;,&quot;193&quot;,&quot;111&quot;, &quot;193&quot;);    &#x2F;&#x2F; 使用流操作    List&lt;Dept&gt; results &#x3D; ids.stream()            .filter(s -&gt; s.length() &gt; 2)            .distinct()            .map(Integer::valueOf)            .sorted(Comparator.comparingInt(o -&gt; o))            .limit(3)            .map(id -&gt; new Dept(id))            .collect(Collectors.toList());    System.out.println(results);&#125;</code></pre><p>上面的代码片段的处理逻辑很清晰：</p><ol><li>使用filter过滤掉不符合条件的数据</li><li>通过distinct对存量元素进行去重操作</li><li>通过map操作将字符串转成整数类型</li><li>借助sorted指定按照数字大小正序排列</li><li>使用limit截取排在前3位的元素</li><li>又一次使用map将id转为Dept对象类型</li><li>使用collect终止操作将最终处理后的数据收集到list中</li></ol><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">[Dept&#123;id&#x3D;111&#125;,  Dept&#123;id&#x3D;193&#125;,  Dept&#123;id&#x3D;205&#125;]</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="简单结果终止方法"><a href="#简单结果终止方法" class="headerlink" title="简单结果终止方法"></a>简单结果终止方法</h3><p>按照前面介绍的，终止方法里面像 <code>count</code>、<code>max</code>、<code>min</code>、<code>findAny</code>、<code>findFirst</code>、<code>anyMatch</code>、<code>allMatch</code>、<code>noneMatch</code>等方法，均属于这里说的简单结果终止方法。所谓简单，指的是其结果形式是数字、布尔值或者Optional对象值等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testSimpleStopOptions() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    &#x2F;&#x2F; 统计stream操作后剩余的元素个数    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).count());    &#x2F;&#x2F; 判断是否有元素值等于205    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; 2).anyMatch(&quot;205&quot;::equals));    &#x2F;&#x2F; findFirst操作    ids.stream().filter(s -&gt; s.length() &gt; 2)            .findFirst()            .ifPresent(s -&gt; System.out.println(&quot;findFirst:&quot; + s));&#125;</code></pre><p>执行后结果为：</p><pre class="line-numbers language-none"><code class="language-none">6truefindFirst:205</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>避坑提醒</strong></p><p>这里需要补充提醒下，<strong>一旦一个Stream被执行了终止操作之后，后续便不可以再读这个流执行其他的操作</strong>了，否则会报错，看下面示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testHandleStreamAfterClosed() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    Stream&lt;String&gt; stream &#x3D; ids.stream().filter(s -&gt; s.length() &gt; 2);    &#x2F;&#x2F; 统计stream操作后剩余的元素个数    System.out.println(stream.count());    System.out.println(&quot;-----下面会报错-----&quot;);    &#x2F;&#x2F; 判断是否有元素值等于205    try &#123;        System.out.println(stream.anyMatch(&quot;205&quot;::equals));    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;    System.out.println(&quot;-----上面会报错-----&quot;);&#125;</code></pre><p>执行的时候，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">6-----下面会报错-----java.lang.IllegalStateException: stream has already been operated upon or closedat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:229)at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)at com.veezean.skills.stream.StreamService.testHandleStreamAfterClosed(StreamService.java:153)at com.veezean.skills.stream.StreamService.main(StreamService.java:176)-----上面会报错-----</code></pre><p>因为stream已经被执行 <code>count()</code>终止方法了，所以对stream再执行 <code>anyMatch</code>方法的时候，就会报错 <code>stream has already been operated upon or closed</code>，这一点在使用的时候需要特别注意。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="结果收集终止方法"><a href="#结果收集终止方法" class="headerlink" title="结果收集终止方法"></a>结果收集终止方法</h3><p>因为Stream主要用于对集合数据的处理场景，所以除了上面几种获取简单结果的终止方法之外，更多的场景是获取一个集合类的结果对象，比如List、Set或者HashMap等。</p><p>这里就需要 <code>collect</code>方法出场了，它可以支持生成如下类型的结果数据：</p><ul><li>一个 <code>集合类</code>，比如List、Set或者HashMap等</li><li>StringBuilder对象，支持将多个 <code>字符串进行拼接</code>处理并输出拼接后结果</li><li>一个可以记录个数或者计算总和的对象（<code>数据批量运算统计</code>）</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="生成集合"><a href="#生成集合" class="headerlink" title="生成集合"></a>生成集合</h4><p>应该算是collect最常被使用到的一个场景了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testCollectStopOptions() &#123;    List&lt;Dept&gt; ids &#x3D; Arrays.asList(new Dept(17), new Dept(22), new Dept(23));    &#x2F;&#x2F; collect成list    List&lt;Dept&gt; collectList &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toList());    System.out.println(&quot;collectList:&quot; + collectList);    &#x2F;&#x2F; collect成Set    Set&lt;Dept&gt; collectSet &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toSet());    System.out.println(&quot;collectSet:&quot; + collectSet);    &#x2F;&#x2F; collect成HashMap，key为id，value为Dept对象    Map&lt;Integer, Dept&gt; collectMap &#x3D; ids.stream().filter(dept -&gt; dept.getId() &gt; 20)            .collect(Collectors.toMap(Dept::getId, dept -&gt; dept));    System.out.println(&quot;collectMap:&quot; + collectMap);&#125;</code></pre><p>结果如下：</p><pre class="line-numbers language-none"><code class="language-none">collectList:[Dept&#123;id&#x3D;22&#125;, Dept&#123;id&#x3D;23&#125;]collectSet:[Dept&#123;id&#x3D;23&#125;, Dept&#123;id&#x3D;22&#125;]collectMap:&#123;22&#x3D;Dept&#123;id&#x3D;22&#125;, 23&#x3D;Dept&#123;id&#x3D;23&#125;&#125;</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="生成拼接字符串"><a href="#生成拼接字符串" class="headerlink" title="生成拼接字符串"></a>生成拼接字符串</h4><p><strong>将一个List或者数组中的值拼接到一个字符串里并以逗号分隔开</strong>，这个场景相信大家都不陌生吧？</p><p>如果通过 <code>for</code>循环和 <code>StringBuilder</code>去循环拼接，还得考虑下最后一个逗号如何处理的问题，很繁琐:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testForJoinStrings() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    StringBuilder builder &#x3D; new StringBuilder();    for (String id : ids) &#123;        builder.append(id).append(&#39;,&#39;);    &#125;    &#x2F;&#x2F; 去掉末尾多拼接的逗号    builder.deleteCharAt(builder.length() - 1);    System.out.println(&quot;拼接后：&quot; + builder.toString());&#125;</code></pre><p>但是现在有了Stream，使用 <code>collect</code>可以轻而易举的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testCollectJoinStrings() &#123;    List&lt;String&gt; ids &#x3D; Arrays.asList(&quot;205&quot;, &quot;10&quot;, &quot;308&quot;, &quot;49&quot;, &quot;627&quot;, &quot;193&quot;, &quot;111&quot;, &quot;193&quot;);    String joinResult &#x3D; ids.stream().collect(Collectors.joining(&quot;,&quot;));    System.out.println(&quot;拼接后：&quot; + joinResult);&#125;</code></pre><p>两种方式都可以得到完全相同的结果，但Stream的方式更优雅：</p><pre class="line-numbers language-none"><code class="language-none">拼接后：205,10,308,49,627,193,111,193</code></pre><p>📢 <strong>敲黑板：</strong></p><p>关于这里的说明，评论区中很多的小伙伴提出过疑问，就是这个场景其实使用 <code>String.join()</code> 就可以搞定了，并不需要上面使用 <code>stream</code> 的方式去实现。这里要声明下，<strong>Stream的魅力之处就在于其可以结合到其它的业务逻辑中进行处理</strong>，让代码逻辑更加的自然、一气呵成。如果纯粹是个String字符串拼接的诉求，确实没有必要使用Stream来实现，毕竟杀鸡焉用牛刀嘛~ 但是可以看看下面给出的这个示例，便可以感受出使用Stream进行字符串拼接的真正魅力所在。</p><p><img src="https://pics.codingcoder.cn/pics/202209241126617.png"></p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h4 id="数据批量数学运算"><a href="#数据批量数学运算" class="headerlink" title="数据批量数学运算"></a>数据批量数学运算</h4><p>还有一种场景，实际使用的时候可能会比较少，就是使用collect生成数字数据的总和信息，也可以了解下实现方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testNumberCalculate() &#123;    List&lt;Integer&gt; ids &#x3D; Arrays.asList(10, 20, 30, 40, 50);    &#x2F;&#x2F; 计算平均值    Double average &#x3D; ids.stream().collect(Collectors.averagingInt(value -&gt; value));    System.out.println(&quot;平均值：&quot; + average);    &#x2F;&#x2F; 数据统计信息    IntSummaryStatistics summary &#x3D; ids.stream().collect(Collectors.summarizingInt(value -&gt; value));    System.out.println(&quot;数据统计信息： &quot; + summary);&#125;</code></pre><p>上面的例子中，使用collect方法来对list中元素值进行数学运算，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">平均值：30.0总和： IntSummaryStatistics&#123;count&#x3D;5, sum&#x3D;150, min&#x3D;10, average&#x3D;30.000000, max&#x3D;50&#125;</code></pre><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="并行Stream"><a href="#并行Stream" class="headerlink" title="并行Stream"></a>并行Stream</h2><h3 id="机制说明"><a href="#机制说明" class="headerlink" title="机制说明"></a>机制说明</h3><p>使用并行流，可以有效利用计算机的多CPU硬件，提升逻辑的执行速度。并行流通过将一整个stream划分为 <code>多个片段</code>，然后对各个分片流并行执行处理逻辑，最后将各个分片流的执行结果汇总为一个整体流。</p><p><img src="https://pics.codingcoder.cn/pics/202207102118100.png"></p><h3 id="约束与限制"><a href="#约束与限制" class="headerlink" title="约束与限制"></a>约束与限制</h3><p>并行流类似于多线程在并行处理，所以与多线程场景相关的一些问题同样会存在，比如死锁等问题，所以在并行流终止执行的函数逻辑，必须要保证<strong>线程安全</strong>。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="回答最初的问题"><a href="#回答最初的问题" class="headerlink" title="回答最初的问题"></a>回答最初的问题</h2><p>到这里，关于JAVA Stream的相关概念与用法介绍，基本就讲完了。我们再把焦点切回本文刚开始时提及的一个问题：</p><p><strong>Stream相较于传统的foreach的方式处理stream，到底有啥优势</strong>？</p><p>根据前面的介绍，我们应该可以得出如下几点答案：</p><ul><li><strong>代码更简洁</strong>、偏声明式的编码风格，更容易体现出代码的逻辑意图</li><li><strong>逻辑间解耦</strong>，一个stream中间处理逻辑，无需关注上游与下游的内容，只需要按约定实现自身逻辑即可</li><li>并行流场景<strong>效率</strong>会比迭代器逐个循环更高</li><li>函数式接口，<strong>延迟执行</strong>的特性，中间管道操作不管有多少步骤都不会立即执行，只有遇到终止操作的时候才会开始执行，可以避免一些中间不必要的操作消耗</li></ul><p>当然了，Stream也不全是优点，在有些方面也有其弊端：</p><ul><li>代码调测debug不便</li><li>程序员从历史写法切换到Stream时，需要一定的适应时间</li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好啦，关于JAVA Stream的理解要点与使用技能的阐述就先到这里啦。那通过上面的介绍，各位小伙伴们是否已经跃跃欲试了呢？快去项目中使用体验下吧！当然啦，如果有疑问，也欢迎找我一起探讨探讨咯。</p><p><strong>此外</strong>：</p><ul><li>关于<strong>Stream中collect的分组、分片等进阶操作，以及对并行流的深入探讨</strong>，因为涉及内容比较多且相对独立，<strong>我会在后续的文档中展开专门介绍下</strong>，如果有兴趣的话，可以点个关注、避免迷路。</li><li>关于本文中涉及的<strong>演示代码</strong>的完整示例，我已经整理并提交到github中，如果您有需要，可以自取：<a href="https://github.com/veezean/JavaBasicSkills">https://github.com/veezean/JavaBasicSkills</a></li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p><p>如果觉得有用，请点个关注，也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p><p>期待与你一起探讨，一起成长为更好的自己。</p><p><img src="https://pics.codingcoder.cn/pics/202207091312091.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 缓存实践专栏6 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>testgagagaga</title>
      <link href="//post/20230120142549.html"/>
      <url>//post/20230120142549.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>testgagagaga</title>
      <link href="//post/20230120142515.html"/>
      <url>//post/20230120142515.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//post/20230115000000.html"/>
      <url>//post/20230115000000.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 缓存实践专栏3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 高负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sdfsdfsdfsdfsdfsd</title>
      <link href="//post/20221117000000.html"/>
      <url>//post/20221117000000.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pics.codingcoder.cn/pics/202210050807355.png"></p><p>大家好，又见面了。</p><hr><blockquote><p>本文是笔者作为掘金技术社区签约作者的身份输出的缓存专栏系列内容，将会通过系列专题，讲清楚缓存的方方面面。如果感兴趣，欢迎关注以获取后续更新。</p></blockquote><hr><p>在服务端开发中，<strong>缓存</strong>常常被当做系统<em>性能扛压</em>的不二之选。在实施方案上，缓存使用策略虽有一定普适性，却也并非完全绝对，需要结合实际的项目诉求与场景进行综合权衡与考量，进而得出符合自己项目的最佳实践。</p><h2 id="缓存使用的演进"><a href="#缓存使用的演进" class="headerlink" title="缓存使用的演进"></a>缓存使用的演进</h2><p>现有这么一个系统：</p><blockquote><p>一个互动论坛系统，用户登录系统之后，可以在论坛上查看帖子列表、查看帖子详情、发表帖子、评论帖子、为帖子点赞等操作。</p></blockquote><p>系统中所有的配置数据与业务数据均存储在<code>数据库</code>中。随着业务的发展，注册用户量越来越多，然后整个系统的响应速度也越来越慢，用户体验越来越差，用户逐渐出现流失。</p><h3 id="本地缓存的牛刀小试"><a href="#本地缓存的牛刀小试" class="headerlink" title="本地缓存的牛刀小试"></a>本地缓存的牛刀小试</h3><p>为了挽救这一局面，开发人员需要介入去分析性能瓶颈并尝试优化提升响应速度，并很快找到响应慢的瓶颈在数据库的频繁操作，于是想到了使用<code>缓存</code>来解决问题。</p><p>于是，开发人员在项目中使用了<strong>基于接口</strong>维度的<strong>短期缓存</strong>，对每个接口的<code>请求参数</code>（帖子ID）与<code>响应内容</code>缓存一定的时间（比如1分钟），对于相同的请求，如果匹配到缓存则直接返回缓存的结果即可，不用再次去执行查询数据库以及业务维度的运算逻辑。</p><p><img src="https://pics.codingcoder.cn/pics/202210010704311.png"></p><p><code>JAVA</code>中有很多的开源框架都有提供类似的能力支持，比如<code>Ehcache</code>或者<code>Guava Cache</code>、<code>Caffeine Cache</code>等，可以通过简单的添加注解的方式就实现上述需要的缓存效果。比如使用<em>Ehcache</em>来实现接口接口缓存的时候，代码使用方式如下（这里先简单的演示下，后续的系列文档中会专门对这些框架进行深入的探讨）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Cacheable(value&#x3D;&quot;UserDetailCache&quot;, key&#x3D;&quot;#userId&quot;)public UserDetail queryUserDetailById(String userId) &#123;    UserEntity userEntity &#x3D; userMapper.queryByUserId(userId);    return convertEntityToUserDetail(userEntity);&#125;</code></pre><p>基上面的本地缓存策略改动后重新上线，整体的响应性能上果然提升了很多。<strong>本地缓存</strong>的策略虽然有效地提升了处理请求的速度，<em>但新的问题也随之浮现</em>。有用户反馈，社区内的帖子列表多次刷新后会出现内容不一致的情况，有的帖子刷新之后会从列表消失，多次刷新后偶尔会出现。</p><p>其实这就是本地缓存在集群多节点场景下会遇到的一个很常见的<strong>缓存漂移</strong>现象：</p><p><img src="https://pics.codingcoder.cn/pics/202210010815833.png"></p><p>因为业务集群存在多个节点，而缓存是每个业务节点本地独立构建的，所以才出现了更新场景导致的本地缓存不一致的问题，进而表现为上述问题现象。</p><h3 id="集中式缓存的初露锋芒"><a href="#集中式缓存的初露锋芒" class="headerlink" title="集中式缓存的初露锋芒"></a>集中式缓存的初露锋芒</h3><p>为了解决集群内多个节点间执行写操作之后，各节点本地缓存不一致的问题，开发人员想到可以构建一个<strong>集中式缓存</strong>，然后所有业务节点都读取或者更新同一份缓存数据，这样就可以完美地解决节点间缓存不一致的问题了。</p><p><img src="https://pics.codingcoder.cn/pics/202210010812002.png"></p><p>业界成熟的集中式缓存有很多，最出名的莫过于很多人都耳熟能详的<code>Redis</code>，或者是在各种面试中常常被拿来与Redis进行比较的<code>Memcached</code>。也正是由于它们出色的自身性能表现，在当前的各种分布式系统中，Redis近乎已经成为了一种标配，常常与<code>MySQL</code>等持久化数据库搭配使用，放在数据库前面进行扛压。比如下面图中示例的一种最简化版本的组网架构：</p><p><img src="https://pics.codingcoder.cn/pics/202210041757340.png"></p><p>开发人员对缓存进行了整改，将<strong>本地缓存</strong>改为了<strong>Redis集中式缓存</strong>。这样一来：</p><ol><li><p><strong>缓存不一致问题解决</strong>：解决了各个节点间数据不一致的问题。</p></li><li><p><strong>单机内存容量限制解决</strong>：使用了Redis这种分布式的集中式缓存，扩大了内存缓存的容量范围，可以顺便将很多业务层面的数据全部加载到Redis中分片进行缓存，性能也相比而言得到了提升。</p></li></ol><p>似乎使用集中式缓存已经是分布式系统中的最优解了，但是现实情况真的就这么简单么？<em>也不尽然</em>！</p><h3 id="多级缓存的珠联璧合"><a href="#多级缓存的珠联璧合" class="headerlink" title="多级缓存的珠联璧合"></a>多级缓存的珠联璧合</h3><p>在尝到了集中式缓存的甜头之后，暖心的程序员们想到要彻底为数据库减压，将所有业务中需要频繁使用的数据全部同步存储到<code>Redis</code>中，然后业务使用的时候直接从Redis中获取相关数据，大大地减少了数据库的请求频次。但是改完上线之后，发现有些处理流程中<strong>并没有</strong>太大的性能提升。缘何如此？只因为对<code>集中式缓存</code>的过分<strong>滥用</strong>！分析发现这些流程的处理需要涉及大量的交互与数据整合逻辑，一个流程需要访问近乎<code>30</code>次Redis！虽然Redis的单次请求处理性能极高，甚至可以达到微秒级别的响应速度，但是每个流程里面几十次的<code>网络IO</code>交互，导致频繁的<code>IO请求</code>，以及线程的<code>阻塞</code>与<code>唤醒</code>切换交替，使得系统在线程上下文切换层面<strong>浪费巨大</strong>。</p><p>那么，要想破局，最常规的手段便是尝试降低对集中式缓存（如Redis）的请求数量，降低网络IO交互次数。而如何来降低呢？ —— 又回到了<strong>本地缓存</strong>！集中式缓存并非是分布式系统中提升性能的银弹，但我们可以将本地缓存与集中式缓存结合起来使用，<strong>取长补短</strong>，实现效果最大化。如图所示：</p><p><img src="https://pics.codingcoder.cn/pics/202210031821363.png"></p><p>上图演示的也即<strong>多级缓存</strong>的策略。具体而言：</p><ul><li><p>对于一些<strong>变更频率比较高</strong>的数据，采用<code>集中式缓存</code>，这样可以确保数据变更之后所有节点都可以实时感知到，确保数据一致；</p></li><li><p>对于一些<strong>极少变更的数据</strong>（比如一些系统配置项）或者是一些<strong>对短期一致性要求不高</strong>的数据（比如用户昵称、签名等）则采用<code>本地缓存</code>，大大减少对远端集中式缓存的网络IO次数。</p></li></ul><p>这样一来，系统的响应性能又得到了进一步的提升。</p><p>通过对缓存使用策略的一步步演进，我们可以感受到缓存的恰当使用对系统性能的帮助作用。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="无处不在的缓存"><a href="#无处不在的缓存" class="headerlink" title="无处不在的缓存"></a>无处不在的缓存</h2><p>缓存存在的初衷，就是为了<strong>兼容两个处理速度不一致的场景对接适配</strong>的。在我们的日常生活中，也常常可以看到“<strong>缓存</strong>”的影子。比如对于几年前比较盛行的那种带桶的净水器（见下图），由于净水的功率比较小，导致实时过滤得到纯净水的水流特别的缓慢，用户倒一杯水要等<code>2分钟</code>，体验太差，所以配了个蓄水桶，净水机先慢慢的将净化后的水存储到桶中，然后用户倒水的时候可以从桶里快速的倒出，无需焦急等待 —— 这个蓄水桶，便是一个<strong>缓存器</strong>。</p><p><img src="https://pics.codingcoder.cn/pics/202209302224417.png"></p><p>编码源于生活，<code>CPU</code>的<strong>高速缓存</strong>设计就是这一生活实践在计算机领域的原样复制。缓存可以说在软件世界里无处不在，除了我们自己的业务系统外，在<code>网络传输</code>、<code>操作系统</code>、<code>中间件</code>、<code>基础框架</code>中都可以看到缓存的影子。如：</p><ol><li><strong>网络传输场景</strong>。</li></ol><p>比如<code>ARP协议</code>，基于ARP缓存表进行<code>IP</code>与终端硬件<code>MAC</code>地址之间的缓存映射。这样与对端主机之间有通信需求的时候，就可以在ARP缓存中查找到IP对应的对端设备MAC地址，避免每次请求都需要去发送ARP请求查询MAC地址。</p><ol start="2"><li><strong>MyBatis的多级缓存</strong>。</li></ol><p><code>MyBatis</code>作为<code>JAVA</code>体系中被广泛使用的数据库操作框架，其内部为了提升处理效率，构建了<strong>一级缓存</strong>与<strong>二级缓存</strong>，大大减少了对<code>SQL</code>的重复执行次数。</p><ol start="3"><li><strong>CPU中的缓存</strong>。</li></ol><p><code>CPU</code>与<code>内存</code>之间有个临时存储器（<strong>高速缓存</strong>），容量虽比内存小，但是处理速度却远快于普通内存。高速缓存的机制，有效地解决了<code>CPU运算速度</code>与<code>内存读写速度</code>不匹配的问题。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="缓存的使用场景"><a href="#缓存的使用场景" class="headerlink" title="缓存的使用场景"></a>缓存的使用场景</h2><p>缓存作为互联网类软件系统架构与实现中的<strong>基石</strong>般的存在，不仅仅是在<em>系统扛压</em>或者<em>接口处理速度提升</em>等性能优化方案，在其他多个方面都可以发挥其独一无二的关键价值。下面就让我们一起来看看缓存都可以用在哪些场景上，可以解决我们哪方面的痛点。</p><h3 id="降低自身CPU消耗"><a href="#降低自身CPU消耗" class="headerlink" title="降低自身CPU消耗"></a>降低自身CPU消耗</h3><p>如前面章节中提到的项目实例，缓存最典型的使用场景就是用在系统的<strong>性能优化</strong>上。而在性能优化层面，一个经典的策略就是“<strong>空间换时间</strong>”。比如：</p><ul><li><strong>在数据库表中做一些字段冗备</strong>。</li></ul><p>比如用户表<code>T_User</code>和部门表<code>T_Department</code>，在<code>T_User</code>表中除了有个<code>Department_Id</code>字段<code>与T_Department</code>表进行关联之外，还额外在<code>T_User</code>表中存储<code>Department_Name</code>值。这样在很多需要展示用户所属部门信息的时候就省去了多表关联查询的操作。</p><p><img src="https://pics.codingcoder.cn/pics/202210012126284.png"></p><ul><li><strong>对一些中间处理结果进行存储</strong>。</li></ul><p>比如系统中的<strong>数据报表</strong>模块，需要对整个系统内所有的关联业务数据进行计算统计，且需要多张表多来源数据之间的综合汇总之后才能得到最终的结果，整个过程的计算非常的耗时。如果借助缓存，则可以将一些<em>中间计算结果</em>进行<strong>暂存</strong>，然后报表请求中基于中间结果进行二次简单处理即可。这样可以大大降低基于请求触发的实时计算量。</p><p>在“<code>空间换时间</code>”实施策略中，<strong>缓存</strong>是该策略的<em>核心</em>、也是被使用的最为广泛的一种方案。借助缓存，可以将一些<code>CPU</code>耗时计算的处理结果进行缓存复用，以降低重复计算工作量，达到降低<code>CPU</code>占用的效果。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="减少对外IO交互"><a href="#减少对外IO交互" class="headerlink" title="减少对外IO交互"></a>减少对外IO交互</h3><p>上面介绍的使用缓存是为了不断降低请求处理时对自身CPU占用，进而提升服务的处理性能。这里我们介绍缓存的另一典型使用场景，就是减少系统<code>对外依赖</code>的<strong>请求频次</strong>。即通过将一些从远端请求回来的响应结果进行缓存，后面直接使用此缓存结果而无需再次发起网络IO请求交互。</p><p>对于服务端而言，通过构建缓存的方式来减少自身对外的<strong>IO请求</strong>，主要有几个考量出发点：</p><ol><li><p>从<strong>自身性能</strong>层面考虑，减少对外<code>IO操作</code>，降低了对外接口的<code>响应时延</code>，也对服务端自身处理性能有一定提升。</p></li><li><p>从<strong>对端服务</strong>稳定性层面考虑，避免对端服务<code>负载过大</code>。很多时候调用方和被调用方系统的承压能力是不匹配的，甚至有些被调用方系统可能是不承压的。为了避免将对端服务压垮，需要调用方缓存请求结果，<code>降低IO</code>请求。</p></li><li><p>从<strong>自身可靠性</strong>层面而言，将一些远端服务请求到的结果缓存起来，即使远端服务出现故障，自身业务依旧可以基于缓存数据进行正常业务处理，起到一个<code>兜底作用</code>，<strong>提升自身的抗风险能力</strong>。</p></li></ol><p>在分布式系统服务治理范畴内，服务注册管理服务是必不可少的，比如<code>SpringCloud</code>家族的<code>Eureka</code>，或者是<code>Alibaba</code>开源的<code>Nacos</code>。它们对于缓存的利用，可以说是对上面所提几点的完美阐述。</p><p>以<code>Nacos</code>为例：</p><p><img src="https://pics.codingcoder.cn/pics/202210012142276.png"></p><p>除了上述的因素之外，对一些移动端<code>APP</code>或者<code>H5</code>界面而言，缓存的使用还有一个层面的考虑，即<strong>降低用户的流量消耗</strong>，通过将一些资源类数据缓存到本地，避免反复去下载，给用户省点流量，也可以<strong>提升用户的使用体验</strong>（界面渲染速度快，减少出现白屏等待的情况）。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="提升用户个性化体验"><a href="#提升用户个性化体验" class="headerlink" title="提升用户个性化体验"></a>提升用户个性化体验</h3><p>缓存除了在系统性能提升或系统可靠性兜底等场景发挥价值外，在<code>APP</code>或者<code>web</code>类用户侧产品中，还经常被用于存储一些临时非永久的个性化使用习惯配置或者身份数据，以提升用户的个性化使用体验。</p><ul><li>缓存<code>cookie</code>、<code>session</code>等身份鉴权信息，这样就可以避免用户每次访问都需要进行身份验证。</li></ul><p><img src="https://pics.codingcoder.cn/pics/202209301615141.png"></p><ul><li><p>记住一些用户上次<code>操作习惯</code>，比如用户在一个页面上将列表分页查询设置为<code>100</code>条&#x2F;页，则后续在系统内访问其它列表页面时，都沿用这一设置。</p></li><li><p>缓存用户的一些<code>本地设置</code>，这个主要是<code>APP</code>端常用的功能，可以在缓存中保存些与当前设备绑定的设置信息，仅对当前设备有效。比如同一个账号登录某个APP，用户希望在手机端可以显示深色主题，而PAD端则显示浅色主体，这种基于设备的个性化设置，可以缓存到设备本身即可。</p></li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="业务与缓存的集成模式"><a href="#业务与缓存的集成模式" class="headerlink" title="业务与缓存的集成模式"></a>业务与缓存的集成模式</h2><p>如前所述，我们可以在不同的方面使用缓存来辅助达成项目在某些方面的诉求。而根据使用场景的不同，在结合缓存进行业务逻辑实现的时候，也会存在不同的<strong>架构模式</strong>，典型的会有<code>旁路型缓存</code>、<code>穿透型缓存</code>与<code>异步型缓存</code>三种。</p><h3 id="旁路型缓存"><a href="#旁路型缓存" class="headerlink" title="旁路型缓存"></a>旁路型缓存</h3><p>在<strong>旁路型缓存</strong>模式中，业务自行负责与缓存以及数据库之间的交互，可以<strong>自由决定缓存未命中场景的处理策略</strong>，更加契合大部分业务场景的定制化诉求。</p><p><img src="https://pics.codingcoder.cn/pics/202210032149778.png"></p><p>由于业务模块自行实现缓存与数据库之间的数据写入与更新的逻辑，实际实现的时候需要注意下在<strong>高并发</strong>场景的<code>数据一致性</code>问题，以及可能会出现的<code>缓存击穿</code>、<code>缓存穿透</code>、<code>缓存雪崩</code>等问题的防护。</p><p>旁路型缓存是实际业务中<strong>最常使用</strong>的一种架构模式，在后面的内容中，我们还会不断的涉及到旁路缓存中相关的内容。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="穿透型缓存"><a href="#穿透型缓存" class="headerlink" title="穿透型缓存"></a>穿透型缓存</h3><p><strong>穿透型缓存</strong>在实际业务中<em>使用的较少</em>，主要是应用在一些缓存类的中间件中，或者在一些大型系统中专门的数据管理模块中使用。</p><p>一般情况下，业务使用缓存的时候，会是先尝试读取缓存，在尝试读取<code>DB</code>，而使用穿透型缓存架构时，会有专门模块将这些动作封装成黑盒的，业务模块不会与数据库进行直接交互。如下图所示：</p><p><img src="https://pics.codingcoder.cn/pics/202210032116685.png"></p><p>这种模式对业务而言是比较友好的，业务只需调用缓存接口即可，无需自行实现缓存与DB之间的交互策略。</p><h3 id="异步型缓存"><a href="#异步型缓存" class="headerlink" title="异步型缓存"></a>异步型缓存</h3><p>还有一种缓存的使用模式，可以看作是穿透型缓存的演进异化版本，其使用场景也相对较少，即<strong>异步型缓存</strong>。其主要策略就是业务侧请求的实时读写交互都是基于缓存进行，任何数据的读写也完全基于缓存进行操作。此外，<strong>单独实现</strong>一个数据持久化操作(独立线程或者进程中执行)，用于将缓存中变更的数据写入到数据库中。</p><p><img src="https://pics.codingcoder.cn/pics/202210032116271.png"></p><p>这种情况，<strong>实时业务</strong>读写请求完全<strong>基于缓存</strong>进行，而将数据库仅仅作为一个数据持久化存储的备份盘。由于实时业务请求仅与缓存进行交互，所以在性能上可以得到更好的表现。但是这种模式也存在一个致命的问题：数据可靠性！因为是异步操作，所以在下一次数据写入DB前，会有一段时间数据仅存在于缓存中，<strong>一旦缓存服务宕机，这部分数据将会丢失</strong>。所以这种模式仅适用于对数据一致性要求不是特别高的场景。</p><h2 id="缓存的优秀实践"><a href="#缓存的优秀实践" class="headerlink" title="缓存的优秀实践"></a>缓存的优秀实践</h2><p><code>缓存</code>与<code>持久化存储</code>的一个很大的不同点就是缓存的定位应该是一种辅助角色，是一种<strong>锦上添花</strong>般的存在。</p><p><code>缓存</code>也是一把<strong>双刃剑</strong>，基于缓存可以大幅提升我们的系统<em>并发</em>与<em>承压</em>能力，但稍不留神也可能会让我们的系统陷入<strong>灭顶之灾</strong>。所以我们在决定使用缓存的时候，需要知晓缓存设计与使用的一些关键要点，才可以让我们在使用的时候更加游刃有余。</p><h3 id="可删除重建"><a href="#可删除重建" class="headerlink" title="可删除重建"></a>可删除重建</h3><p><strong>可删除重建</strong>，这是缓存与持久化存储最大的一个差别。缓存的定位一定是为了辅助业务处理而生的，也就是说缓存有则使用，没有也不会影响到我们具体的业务运转。此外，即使我们的缓存数据除了问题，我们也可以将其删除重建。</p><p>这一点在<code>APP</code>类的产品中体现的会比较明显。比如对于<code>微信APP</code>的缓存，就有明确的提示说缓存可以删除而不会影响其功能使用：</p><p><img src="https://pics.codingcoder.cn/pics/202209301622198.png"></p><p>同样地，我们也可以去放心的清理<code>浏览器</code>的缓存，而不用担心清理之后我们浏览器或者网页的功能会出现异常（最多就是需要重新下载或者重建缓存数据，速度会有一些慢）。</p><p><img src="https://pics.codingcoder.cn/pics/202209301702848.png"></p><p>相同的逻辑，在服务端构建的一些缓存，也应该具备此特性。比如基于内存的缓存，当业务进程重启后，应该有途径可以将缓存重建出来（比如从<code>MySQL</code>中加载数据然后构建缓存，或者是缓存<code>从0开始</code>基于请求触发而构建）。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="有兜底屏障"><a href="#有兜底屏障" class="headerlink" title="有兜底屏障"></a>有兜底屏障</h3><p>缓存作为高并发类系统中的核心组件，负责抗住大部分的并发请求，一旦缓存组件出问题，往往对整个系统会造成毁灭性的打击。所以我们的缓存在实现的时候必须要有充足且完备的<strong>兜底</strong>与<strong>自恢复</strong>机制。需要做到以下几点：</p><ul><li><p>关注下缓存数据量超出承受范围的处理策略，比如定好数据的<code>淘汰机制</code>。</p></li><li><p>避免缓存集中失效，比如批量加载数据到缓存的时候<code>随机打散</code>过期时间，避免同一时间大批量缓存失效引发<strong>缓存雪崩</strong>问题。</p></li><li><p>有效地<strong>冷数据预热</strong>加载机制，以及<strong>热点数据防过期</strong>机制，避免出现大量对冷数据的请求无法命中缓存或者热点数据突然失效，导致<code>缓存击穿</code>问题。</p></li><li><p>合理的<strong>防身自保</strong>手段，比如采用<code>布隆过滤器</code>机制，避免被恶意请求攻陷，导致<strong>缓存穿透</strong>类的问题。</p></li></ul><p>缓存的可靠性与兜底策略设计，是一个宏大且宽泛的命题，在本系列专栏后续的文章中，我们会逐个深入的探讨。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="关注缓存的一致性保证"><a href="#关注缓存的一致性保证" class="headerlink" title="关注缓存的一致性保证"></a>关注缓存的一致性保证</h3><p>在高并发类的系统中进行数据更新的时候，缓存与数据库的<code>数据一致性</code>问题，是一个永远无法绕过的话题。对于基于<strong>旁路型缓存</strong>的大部分业务而言，数据更新操作，一般可以组合出几种不同的处理策略：</p><ul><li><p>先更新缓存，再更新数据库</p></li><li><p>先更新数据库， 再更新缓存</p></li><li><p>先删除缓存，再更新数据库</p></li><li><p>先更新数据库，再删除缓存</p></li></ul><p>由于大部分数据库都支持<code>事务</code>，而几乎所有的缓存操作都不具有事务性。所以在一些写操作并发不是特别高且一致性要求不是特别强烈的情况下，可以简单的借助数据库的事务进行控制。比如先更新数据库再更新缓存，如果缓存更新失败则回滚数据库事务。</p><p>然而在一些并发请求特别高的时候，基于事务控制来保证数据一致性往往会对性能造成影响，且事务<code>隔离级别</code>设置的越高影响越大，所以也可以采用一些其它辅助策略，来替代事务的控制，如<code>重试机制</code>、或<code>异步补偿机制</code>、或多者结合方式等。</p><p>比如下图所示的这种策略：</p><p><img src="https://pics.codingcoder.cn/pics/202210041121273.png"></p><p>上图的数据更新处理策略，可以有效地保证数据的最终一致性，降低极端情况可能出现数据不一致的概率，并兜底增加了数据不一致时的自恢复能力。</p><p>数据一致性保证作为缓存的另一个重要命题，我们会在本系列专栏后续的文章中专门进行深入的剖析。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="总结回顾"><a href="#总结回顾" class="headerlink" title="总结回顾"></a>总结回顾</h2><p>本篇文章的内容中，我们对缓存的各个方面进行了一个简单的阐述与了解，也可以看出缓存对于一个软件系统的重要价值。通过对缓存的合理、充分利用，可以大大的增强我们的系统<code>承压性能</code>、提升产品的<code>用户体验</code>。</p><p>缓存作为<strong>高并发系统</strong>中的<code>神兵利器</code>被广泛使用，堪称<strong>高并发系统的基石之一</strong>。而缓存的内容还远远不止我们本篇文档中所介绍的这些、它是一个非常宏大的命题。</p><p><img src="https://pics.codingcoder.cn/pics/202210050750684.png"></p><p>为了能够将缓存的方方面面彻底的讲透、讲全，在接下来的一段时间里，我会以<strong>系列专栏</strong>的形式，从不同的角度对缓存的方方面面进行探讨。不仅仅着眼于如何去使用缓存、也一起聊聊缓存设计中的一些<code>哲学理念</code> —— 这一点是我觉得更有价值的一点，因为这些理念对提升我们的<strong>软件架构认知</strong>、完善我们的<strong>软件设计思维</strong>有很大的指导与借鉴意义。</p><p>所以，如果你有兴趣，欢迎关注本系列专栏（<a href="https://juejin.cn/column/7140852038258147358">深入理解缓存原理与实战设计</a>），我会以我一贯的行文风格，用<strong>最简单的语言讲透复杂的逻辑</strong>，期待一起切磋、共同成长。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p><p>如果觉得有用，请<strong>点赞 + 关注</strong>让我感受到您的支持。也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p><p>期待与你一起探讨，一起成长为更好的自己。</p><p><img src="https://pics.codingcoder.cn/pics/202207091312091.gif"></p><p><img src="https://pics.codingcoder.cn/pics/202207091317876.png"></p>]]></content>
      
      
      <categories>
          
          <category> 缓存实践专栏5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 高负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊作为高并发系统基石之一的缓存，会用很简单，用好才是技术活</title>
      <link href="//post/20221117000000.html"/>
      <url>//post/20221117000000.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pics.codingcoder.cn/pics/202210050807355.png"></p><p>大家好，又见面了。</p><hr><blockquote><p>本文是笔者作为掘金技术社区签约作者的身份输出的缓存专栏系列内容，将会通过系列专题，讲清楚缓存的方方面面。如果感兴趣，欢迎关注以获取后续更新。</p></blockquote><hr><p>在服务端开发中，<strong>缓存</strong>常常被当做系统<em>性能扛压</em>的不二之选。在实施方案上，缓存使用策略虽有一定普适性，却也并非完全绝对，需要结合实际的项目诉求与场景进行综合权衡与考量，进而得出符合自己项目的最佳实践。</p><h2 id="缓存使用的演进"><a href="#缓存使用的演进" class="headerlink" title="缓存使用的演进"></a>缓存使用的演进</h2><p>现有这么一个系统：</p><blockquote><p>一个互动论坛系统，用户登录系统之后，可以在论坛上查看帖子列表、查看帖子详情、发表帖子、评论帖子、为帖子点赞等操作。</p></blockquote><p>系统中所有的配置数据与业务数据均存储在<code>数据库</code>中。随着业务的发展，注册用户量越来越多，然后整个系统的响应速度也越来越慢，用户体验越来越差，用户逐渐出现流失。</p><h3 id="本地缓存的牛刀小试"><a href="#本地缓存的牛刀小试" class="headerlink" title="本地缓存的牛刀小试"></a>本地缓存的牛刀小试</h3><p>为了挽救这一局面，开发人员需要介入去分析性能瓶颈并尝试优化提升响应速度，并很快找到响应慢的瓶颈在数据库的频繁操作，于是想到了使用<code>缓存</code>来解决问题。</p><p>于是，开发人员在项目中使用了<strong>基于接口</strong>维度的<strong>短期缓存</strong>，对每个接口的<code>请求参数</code>（帖子ID）与<code>响应内容</code>缓存一定的时间（比如1分钟），对于相同的请求，如果匹配到缓存则直接返回缓存的结果即可，不用再次去执行查询数据库以及业务维度的运算逻辑。</p><p><img src="https://pics.codingcoder.cn/pics/202210010704311.png"></p><p><code>JAVA</code>中有很多的开源框架都有提供类似的能力支持，比如<code>Ehcache</code>或者<code>Guava Cache</code>、<code>Caffeine Cache</code>等，可以通过简单的添加注解的方式就实现上述需要的缓存效果。比如使用<em>Ehcache</em>来实现接口接口缓存的时候，代码使用方式如下（这里先简单的演示下，后续的系列文档中会专门对这些框架进行深入的探讨）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Cacheable(value&#x3D;&quot;UserDetailCache&quot;, key&#x3D;&quot;#userId&quot;)public UserDetail queryUserDetailById(String userId) &#123;    UserEntity userEntity &#x3D; userMapper.queryByUserId(userId);    return convertEntityToUserDetail(userEntity);&#125;</code></pre><p>基上面的本地缓存策略改动后重新上线，整体的响应性能上果然提升了很多。<strong>本地缓存</strong>的策略虽然有效地提升了处理请求的速度，<em>但新的问题也随之浮现</em>。有用户反馈，社区内的帖子列表多次刷新后会出现内容不一致的情况，有的帖子刷新之后会从列表消失，多次刷新后偶尔会出现。</p><p>其实这就是本地缓存在集群多节点场景下会遇到的一个很常见的<strong>缓存漂移</strong>现象：</p><p><img src="https://pics.codingcoder.cn/pics/202210010815833.png"></p><p>因为业务集群存在多个节点，而缓存是每个业务节点本地独立构建的，所以才出现了更新场景导致的本地缓存不一致的问题，进而表现为上述问题现象。</p><h3 id="集中式缓存的初露锋芒"><a href="#集中式缓存的初露锋芒" class="headerlink" title="集中式缓存的初露锋芒"></a>集中式缓存的初露锋芒</h3><p>为了解决集群内多个节点间执行写操作之后，各节点本地缓存不一致的问题，开发人员想到可以构建一个<strong>集中式缓存</strong>，然后所有业务节点都读取或者更新同一份缓存数据，这样就可以完美地解决节点间缓存不一致的问题了。</p><p><img src="https://pics.codingcoder.cn/pics/202210010812002.png"></p><p>业界成熟的集中式缓存有很多，最出名的莫过于很多人都耳熟能详的<code>Redis</code>，或者是在各种面试中常常被拿来与Redis进行比较的<code>Memcached</code>。也正是由于它们出色的自身性能表现，在当前的各种分布式系统中，Redis近乎已经成为了一种标配，常常与<code>MySQL</code>等持久化数据库搭配使用，放在数据库前面进行扛压。比如下面图中示例的一种最简化版本的组网架构：</p><p><img src="https://pics.codingcoder.cn/pics/202210041757340.png"></p><p>开发人员对缓存进行了整改，将<strong>本地缓存</strong>改为了<strong>Redis集中式缓存</strong>。这样一来：</p><ol><li><p><strong>缓存不一致问题解决</strong>：解决了各个节点间数据不一致的问题。</p></li><li><p><strong>单机内存容量限制解决</strong>：使用了Redis这种分布式的集中式缓存，扩大了内存缓存的容量范围，可以顺便将很多业务层面的数据全部加载到Redis中分片进行缓存，性能也相比而言得到了提升。</p></li></ol><p>似乎使用集中式缓存已经是分布式系统中的最优解了，但是现实情况真的就这么简单么？<em>也不尽然</em>！</p><h3 id="多级缓存的珠联璧合"><a href="#多级缓存的珠联璧合" class="headerlink" title="多级缓存的珠联璧合"></a>多级缓存的珠联璧合</h3><p>在尝到了集中式缓存的甜头之后，暖心的程序员们想到要彻底为数据库减压，将所有业务中需要频繁使用的数据全部同步存储到<code>Redis</code>中，然后业务使用的时候直接从Redis中获取相关数据，大大地减少了数据库的请求频次。但是改完上线之后，发现有些处理流程中<strong>并没有</strong>太大的性能提升。缘何如此？只因为对<code>集中式缓存</code>的过分<strong>滥用</strong>！分析发现这些流程的处理需要涉及大量的交互与数据整合逻辑，一个流程需要访问近乎<code>30</code>次Redis！虽然Redis的单次请求处理性能极高，甚至可以达到微秒级别的响应速度，但是每个流程里面几十次的<code>网络IO</code>交互，导致频繁的<code>IO请求</code>，以及线程的<code>阻塞</code>与<code>唤醒</code>切换交替，使得系统在线程上下文切换层面<strong>浪费巨大</strong>。</p><p>那么，要想破局，最常规的手段便是尝试降低对集中式缓存（如Redis）的请求数量，降低网络IO交互次数。而如何来降低呢？ —— 又回到了<strong>本地缓存</strong>！集中式缓存并非是分布式系统中提升性能的银弹，但我们可以将本地缓存与集中式缓存结合起来使用，<strong>取长补短</strong>，实现效果最大化。如图所示：</p><p><img src="https://pics.codingcoder.cn/pics/202210031821363.png"></p><p>上图演示的也即<strong>多级缓存</strong>的策略。具体而言：</p><ul><li><p>对于一些<strong>变更频率比较高</strong>的数据，采用<code>集中式缓存</code>，这样可以确保数据变更之后所有节点都可以实时感知到，确保数据一致；</p></li><li><p>对于一些<strong>极少变更的数据</strong>（比如一些系统配置项）或者是一些<strong>对短期一致性要求不高</strong>的数据（比如用户昵称、签名等）则采用<code>本地缓存</code>，大大减少对远端集中式缓存的网络IO次数。</p></li></ul><p>这样一来，系统的响应性能又得到了进一步的提升。</p><p>通过对缓存使用策略的一步步演进，我们可以感受到缓存的恰当使用对系统性能的帮助作用。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="无处不在的缓存"><a href="#无处不在的缓存" class="headerlink" title="无处不在的缓存"></a>无处不在的缓存</h2><p>缓存存在的初衷，就是为了<strong>兼容两个处理速度不一致的场景对接适配</strong>的。在我们的日常生活中，也常常可以看到“<strong>缓存</strong>”的影子。比如对于几年前比较盛行的那种带桶的净水器（见下图），由于净水的功率比较小，导致实时过滤得到纯净水的水流特别的缓慢，用户倒一杯水要等<code>2分钟</code>，体验太差，所以配了个蓄水桶，净水机先慢慢的将净化后的水存储到桶中，然后用户倒水的时候可以从桶里快速的倒出，无需焦急等待 —— 这个蓄水桶，便是一个<strong>缓存器</strong>。</p><p><img src="https://pics.codingcoder.cn/pics/202209302224417.png"></p><p>编码源于生活，<code>CPU</code>的<strong>高速缓存</strong>设计就是这一生活实践在计算机领域的原样复制。缓存可以说在软件世界里无处不在，除了我们自己的业务系统外，在<code>网络传输</code>、<code>操作系统</code>、<code>中间件</code>、<code>基础框架</code>中都可以看到缓存的影子。如：</p><ol><li><strong>网络传输场景</strong>。</li></ol><p>比如<code>ARP协议</code>，基于ARP缓存表进行<code>IP</code>与终端硬件<code>MAC</code>地址之间的缓存映射。这样与对端主机之间有通信需求的时候，就可以在ARP缓存中查找到IP对应的对端设备MAC地址，避免每次请求都需要去发送ARP请求查询MAC地址。</p><ol start="2"><li><strong>MyBatis的多级缓存</strong>。</li></ol><p><code>MyBatis</code>作为<code>JAVA</code>体系中被广泛使用的数据库操作框架，其内部为了提升处理效率，构建了<strong>一级缓存</strong>与<strong>二级缓存</strong>，大大减少了对<code>SQL</code>的重复执行次数。</p><ol start="3"><li><strong>CPU中的缓存</strong>。</li></ol><p><code>CPU</code>与<code>内存</code>之间有个临时存储器（<strong>高速缓存</strong>），容量虽比内存小，但是处理速度却远快于普通内存。高速缓存的机制，有效地解决了<code>CPU运算速度</code>与<code>内存读写速度</code>不匹配的问题。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="缓存的使用场景"><a href="#缓存的使用场景" class="headerlink" title="缓存的使用场景"></a>缓存的使用场景</h2><p>缓存作为互联网类软件系统架构与实现中的<strong>基石</strong>般的存在，不仅仅是在<em>系统扛压</em>或者<em>接口处理速度提升</em>等性能优化方案，在其他多个方面都可以发挥其独一无二的关键价值。下面就让我们一起来看看缓存都可以用在哪些场景上，可以解决我们哪方面的痛点。</p><h3 id="降低自身CPU消耗"><a href="#降低自身CPU消耗" class="headerlink" title="降低自身CPU消耗"></a>降低自身CPU消耗</h3><p>如前面章节中提到的项目实例，缓存最典型的使用场景就是用在系统的<strong>性能优化</strong>上。而在性能优化层面，一个经典的策略就是“<strong>空间换时间</strong>”。比如：</p><ul><li><strong>在数据库表中做一些字段冗备</strong>。</li></ul><p>比如用户表<code>T_User</code>和部门表<code>T_Department</code>，在<code>T_User</code>表中除了有个<code>Department_Id</code>字段<code>与T_Department</code>表进行关联之外，还额外在<code>T_User</code>表中存储<code>Department_Name</code>值。这样在很多需要展示用户所属部门信息的时候就省去了多表关联查询的操作。</p><p><img src="https://pics.codingcoder.cn/pics/202210012126284.png"></p><ul><li><strong>对一些中间处理结果进行存储</strong>。</li></ul><p>比如系统中的<strong>数据报表</strong>模块，需要对整个系统内所有的关联业务数据进行计算统计，且需要多张表多来源数据之间的综合汇总之后才能得到最终的结果，整个过程的计算非常的耗时。如果借助缓存，则可以将一些<em>中间计算结果</em>进行<strong>暂存</strong>，然后报表请求中基于中间结果进行二次简单处理即可。这样可以大大降低基于请求触发的实时计算量。</p><p>在“<code>空间换时间</code>”实施策略中，<strong>缓存</strong>是该策略的<em>核心</em>、也是被使用的最为广泛的一种方案。借助缓存，可以将一些<code>CPU</code>耗时计算的处理结果进行缓存复用，以降低重复计算工作量，达到降低<code>CPU</code>占用的效果。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="减少对外IO交互"><a href="#减少对外IO交互" class="headerlink" title="减少对外IO交互"></a>减少对外IO交互</h3><p>上面介绍的使用缓存是为了不断降低请求处理时对自身CPU占用，进而提升服务的处理性能。这里我们介绍缓存的另一典型使用场景，就是减少系统<code>对外依赖</code>的<strong>请求频次</strong>。即通过将一些从远端请求回来的响应结果进行缓存，后面直接使用此缓存结果而无需再次发起网络IO请求交互。</p><p>对于服务端而言，通过构建缓存的方式来减少自身对外的<strong>IO请求</strong>，主要有几个考量出发点：</p><ol><li><p>从<strong>自身性能</strong>层面考虑，减少对外<code>IO操作</code>，降低了对外接口的<code>响应时延</code>，也对服务端自身处理性能有一定提升。</p></li><li><p>从<strong>对端服务</strong>稳定性层面考虑，避免对端服务<code>负载过大</code>。很多时候调用方和被调用方系统的承压能力是不匹配的，甚至有些被调用方系统可能是不承压的。为了避免将对端服务压垮，需要调用方缓存请求结果，<code>降低IO</code>请求。</p></li><li><p>从<strong>自身可靠性</strong>层面而言，将一些远端服务请求到的结果缓存起来，即使远端服务出现故障，自身业务依旧可以基于缓存数据进行正常业务处理，起到一个<code>兜底作用</code>，<strong>提升自身的抗风险能力</strong>。</p></li></ol><p>在分布式系统服务治理范畴内，服务注册管理服务是必不可少的，比如<code>SpringCloud</code>家族的<code>Eureka</code>，或者是<code>Alibaba</code>开源的<code>Nacos</code>。它们对于缓存的利用，可以说是对上面所提几点的完美阐述。</p><p>以<code>Nacos</code>为例：</p><p><img src="https://pics.codingcoder.cn/pics/202210012142276.png"></p><p>除了上述的因素之外，对一些移动端<code>APP</code>或者<code>H5</code>界面而言，缓存的使用还有一个层面的考虑，即<strong>降低用户的流量消耗</strong>，通过将一些资源类数据缓存到本地，避免反复去下载，给用户省点流量，也可以<strong>提升用户的使用体验</strong>（界面渲染速度快，减少出现白屏等待的情况）。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="提升用户个性化体验"><a href="#提升用户个性化体验" class="headerlink" title="提升用户个性化体验"></a>提升用户个性化体验</h3><p>缓存除了在系统性能提升或系统可靠性兜底等场景发挥价值外，在<code>APP</code>或者<code>web</code>类用户侧产品中，还经常被用于存储一些临时非永久的个性化使用习惯配置或者身份数据，以提升用户的个性化使用体验。</p><ul><li>缓存<code>cookie</code>、<code>session</code>等身份鉴权信息，这样就可以避免用户每次访问都需要进行身份验证。</li></ul><p><img src="https://pics.codingcoder.cn/pics/202209301615141.png"></p><ul><li><p>记住一些用户上次<code>操作习惯</code>，比如用户在一个页面上将列表分页查询设置为<code>100</code>条&#x2F;页，则后续在系统内访问其它列表页面时，都沿用这一设置。</p></li><li><p>缓存用户的一些<code>本地设置</code>，这个主要是<code>APP</code>端常用的功能，可以在缓存中保存些与当前设备绑定的设置信息，仅对当前设备有效。比如同一个账号登录某个APP，用户希望在手机端可以显示深色主题，而PAD端则显示浅色主体，这种基于设备的个性化设置，可以缓存到设备本身即可。</p></li></ul><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="业务与缓存的集成模式"><a href="#业务与缓存的集成模式" class="headerlink" title="业务与缓存的集成模式"></a>业务与缓存的集成模式</h2><p>如前所述，我们可以在不同的方面使用缓存来辅助达成项目在某些方面的诉求。而根据使用场景的不同，在结合缓存进行业务逻辑实现的时候，也会存在不同的<strong>架构模式</strong>，典型的会有<code>旁路型缓存</code>、<code>穿透型缓存</code>与<code>异步型缓存</code>三种。</p><h3 id="旁路型缓存"><a href="#旁路型缓存" class="headerlink" title="旁路型缓存"></a>旁路型缓存</h3><p>在<strong>旁路型缓存</strong>模式中，业务自行负责与缓存以及数据库之间的交互，可以<strong>自由决定缓存未命中场景的处理策略</strong>，更加契合大部分业务场景的定制化诉求。</p><p><img src="https://pics.codingcoder.cn/pics/202210032149778.png"></p><p>由于业务模块自行实现缓存与数据库之间的数据写入与更新的逻辑，实际实现的时候需要注意下在<strong>高并发</strong>场景的<code>数据一致性</code>问题，以及可能会出现的<code>缓存击穿</code>、<code>缓存穿透</code>、<code>缓存雪崩</code>等问题的防护。</p><p>旁路型缓存是实际业务中<strong>最常使用</strong>的一种架构模式，在后面的内容中，我们还会不断的涉及到旁路缓存中相关的内容。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="穿透型缓存"><a href="#穿透型缓存" class="headerlink" title="穿透型缓存"></a>穿透型缓存</h3><p><strong>穿透型缓存</strong>在实际业务中<em>使用的较少</em>，主要是应用在一些缓存类的中间件中，或者在一些大型系统中专门的数据管理模块中使用。</p><p>一般情况下，业务使用缓存的时候，会是先尝试读取缓存，在尝试读取<code>DB</code>，而使用穿透型缓存架构时，会有专门模块将这些动作封装成黑盒的，业务模块不会与数据库进行直接交互。如下图所示：</p><p><img src="https://pics.codingcoder.cn/pics/202210032116685.png"></p><p>这种模式对业务而言是比较友好的，业务只需调用缓存接口即可，无需自行实现缓存与DB之间的交互策略。</p><h3 id="异步型缓存"><a href="#异步型缓存" class="headerlink" title="异步型缓存"></a>异步型缓存</h3><p>还有一种缓存的使用模式，可以看作是穿透型缓存的演进异化版本，其使用场景也相对较少，即<strong>异步型缓存</strong>。其主要策略就是业务侧请求的实时读写交互都是基于缓存进行，任何数据的读写也完全基于缓存进行操作。此外，<strong>单独实现</strong>一个数据持久化操作(独立线程或者进程中执行)，用于将缓存中变更的数据写入到数据库中。</p><p><img src="https://pics.codingcoder.cn/pics/202210032116271.png"></p><p>这种情况，<strong>实时业务</strong>读写请求完全<strong>基于缓存</strong>进行，而将数据库仅仅作为一个数据持久化存储的备份盘。由于实时业务请求仅与缓存进行交互，所以在性能上可以得到更好的表现。但是这种模式也存在一个致命的问题：数据可靠性！因为是异步操作，所以在下一次数据写入DB前，会有一段时间数据仅存在于缓存中，<strong>一旦缓存服务宕机，这部分数据将会丢失</strong>。所以这种模式仅适用于对数据一致性要求不是特别高的场景。</p><h2 id="缓存的优秀实践"><a href="#缓存的优秀实践" class="headerlink" title="缓存的优秀实践"></a>缓存的优秀实践</h2><p><code>缓存</code>与<code>持久化存储</code>的一个很大的不同点就是缓存的定位应该是一种辅助角色，是一种<strong>锦上添花</strong>般的存在。</p><p><code>缓存</code>也是一把<strong>双刃剑</strong>，基于缓存可以大幅提升我们的系统<em>并发</em>与<em>承压</em>能力，但稍不留神也可能会让我们的系统陷入<strong>灭顶之灾</strong>。所以我们在决定使用缓存的时候，需要知晓缓存设计与使用的一些关键要点，才可以让我们在使用的时候更加游刃有余。</p><h3 id="可删除重建"><a href="#可删除重建" class="headerlink" title="可删除重建"></a>可删除重建</h3><p><strong>可删除重建</strong>，这是缓存与持久化存储最大的一个差别。缓存的定位一定是为了辅助业务处理而生的，也就是说缓存有则使用，没有也不会影响到我们具体的业务运转。此外，即使我们的缓存数据除了问题，我们也可以将其删除重建。</p><p>这一点在<code>APP</code>类的产品中体现的会比较明显。比如对于<code>微信APP</code>的缓存，就有明确的提示说缓存可以删除而不会影响其功能使用：</p><p><img src="https://pics.codingcoder.cn/pics/202209301622198.png"></p><p>同样地，我们也可以去放心的清理<code>浏览器</code>的缓存，而不用担心清理之后我们浏览器或者网页的功能会出现异常（最多就是需要重新下载或者重建缓存数据，速度会有一些慢）。</p><p><img src="https://pics.codingcoder.cn/pics/202209301702848.png"></p><p>相同的逻辑，在服务端构建的一些缓存，也应该具备此特性。比如基于内存的缓存，当业务进程重启后，应该有途径可以将缓存重建出来（比如从<code>MySQL</code>中加载数据然后构建缓存，或者是缓存<code>从0开始</code>基于请求触发而构建）。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="有兜底屏障"><a href="#有兜底屏障" class="headerlink" title="有兜底屏障"></a>有兜底屏障</h3><p>缓存作为高并发类系统中的核心组件，负责抗住大部分的并发请求，一旦缓存组件出问题，往往对整个系统会造成毁灭性的打击。所以我们的缓存在实现的时候必须要有充足且完备的<strong>兜底</strong>与<strong>自恢复</strong>机制。需要做到以下几点：</p><ul><li><p>关注下缓存数据量超出承受范围的处理策略，比如定好数据的<code>淘汰机制</code>。</p></li><li><p>避免缓存集中失效，比如批量加载数据到缓存的时候<code>随机打散</code>过期时间，避免同一时间大批量缓存失效引发<strong>缓存雪崩</strong>问题。</p></li><li><p>有效地<strong>冷数据预热</strong>加载机制，以及<strong>热点数据防过期</strong>机制，避免出现大量对冷数据的请求无法命中缓存或者热点数据突然失效，导致<code>缓存击穿</code>问题。</p></li><li><p>合理的<strong>防身自保</strong>手段，比如采用<code>布隆过滤器</code>机制，避免被恶意请求攻陷，导致<strong>缓存穿透</strong>类的问题。</p></li></ul><p>缓存的可靠性与兜底策略设计，是一个宏大且宽泛的命题，在本系列专栏后续的文章中，我们会逐个深入的探讨。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h3 id="关注缓存的一致性保证"><a href="#关注缓存的一致性保证" class="headerlink" title="关注缓存的一致性保证"></a>关注缓存的一致性保证</h3><p>在高并发类的系统中进行数据更新的时候，缓存与数据库的<code>数据一致性</code>问题，是一个永远无法绕过的话题。对于基于<strong>旁路型缓存</strong>的大部分业务而言，数据更新操作，一般可以组合出几种不同的处理策略：</p><ul><li><p>先更新缓存，再更新数据库</p></li><li><p>先更新数据库， 再更新缓存</p></li><li><p>先删除缓存，再更新数据库</p></li><li><p>先更新数据库，再删除缓存</p></li></ul><p>由于大部分数据库都支持<code>事务</code>，而几乎所有的缓存操作都不具有事务性。所以在一些写操作并发不是特别高且一致性要求不是特别强烈的情况下，可以简单的借助数据库的事务进行控制。比如先更新数据库再更新缓存，如果缓存更新失败则回滚数据库事务。</p><p>然而在一些并发请求特别高的时候，基于事务控制来保证数据一致性往往会对性能造成影响，且事务<code>隔离级别</code>设置的越高影响越大，所以也可以采用一些其它辅助策略，来替代事务的控制，如<code>重试机制</code>、或<code>异步补偿机制</code>、或多者结合方式等。</p><p>比如下图所示的这种策略：</p><p><img src="https://pics.codingcoder.cn/pics/202210041121273.png"></p><p>上图的数据更新处理策略，可以有效地保证数据的最终一致性，降低极端情况可能出现数据不一致的概率，并兜底增加了数据不一致时的自恢复能力。</p><p>数据一致性保证作为缓存的另一个重要命题，我们会在本系列专栏后续的文章中专门进行深入的剖析。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><h2 id="总结回顾"><a href="#总结回顾" class="headerlink" title="总结回顾"></a>总结回顾</h2><p>本篇文章的内容中，我们对缓存的各个方面进行了一个简单的阐述与了解，也可以看出缓存对于一个软件系统的重要价值。通过对缓存的合理、充分利用，可以大大的增强我们的系统<code>承压性能</code>、提升产品的<code>用户体验</code>。</p><p>缓存作为<strong>高并发系统</strong>中的<code>神兵利器</code>被广泛使用，堪称<strong>高并发系统的基石之一</strong>。而缓存的内容还远远不止我们本篇文档中所介绍的这些、它是一个非常宏大的命题。</p><p><img src="https://pics.codingcoder.cn/pics/202210050750684.png"></p><p>为了能够将缓存的方方面面彻底的讲透、讲全，在接下来的一段时间里，我会以<strong>系列专栏</strong>的形式，从不同的角度对缓存的方方面面进行探讨。不仅仅着眼于如何去使用缓存、也一起聊聊缓存设计中的一些<code>哲学理念</code> —— 这一点是我觉得更有价值的一点，因为这些理念对提升我们的<strong>软件架构认知</strong>、完善我们的<strong>软件设计思维</strong>有很大的指导与借鉴意义。</p><p>所以，如果你有兴趣，欢迎关注本系列专栏（<a href="https://juejin.cn/column/7140852038258147358">深入理解缓存原理与实战设计</a>），我会以我一贯的行文风格，用<strong>最简单的语言讲透复杂的逻辑</strong>，期待一起切磋、共同成长。</p><p><img src="https://pics.codingcoder.cn/pics/202207102124124.gif"></p><p><strong>我是悟道，聊技术、又不仅仅聊技术~</strong></p><p>如果觉得有用，请<strong>点赞 + 关注</strong>让我感受到您的支持。也可以关注下我的公众号【架构悟道】，获取更及时的更新。</p><p>期待与你一起探讨，一起成长为更好的自己。</p><p><img src="https://pics.codingcoder.cn/pics/202207091312091.gif"></p><p><img src="https://pics.codingcoder.cn/pics/202207091317876.png"></p>]]></content>
      
      
      <categories>
          
          <category> 缓存实践专栏1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 高负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="//post/20221115000000.html"/>
      <url>//post/20221115000000.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 缓存实践专栏2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 高负载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
